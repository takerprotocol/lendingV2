type LendingPool @entity {
  id: ID! # proxy
  reserves: [Reserve!]! @derivedFrom(field: "pool")
  nfts: [NftCollection!]! @derivedFrom(field: "pool")
}

type Reserve @entity {
  id: ID! # underlying address, ETH = 0
  pool: LendingPool!

  tToken: Bytes! # proxy
  debtToken: Bytes! # pr1.1oxy
  interestRateCalculator: Bytes! #library
  liqThreshold: BigInt!
  ltv: BigInt!

  users: [UserReserve!]! @derivedFrom(field: "reserve")
}

type NftCollection @entity {
  id: ID!  # underlying address
  pool: LendingPool!

  tNFT: Bytes! # proxy
  ercType: BigInt!
  liqThreshold: BigInt!
  ltv: BigInt!

  users: [UserNftCollection!]! @derivedFrom(field: "collection")
}

type User @entity {
  id: ID! # address
  reserves: [UserReserve!]! @derivedFrom(field: "user")
  collections: [UserNftCollection!]! @derivedFrom(field: "user")
}

type UserReserve @entity {
  id: ID! # user - reserve
  user: User!
  reserve: Reserve!
  depositedAmount: BigInt! # tToken.balanceOf(user) * LiqInx
  borrowedAmount: BigInt! # debtToken.balanceOf(user) * DebtIdx
  usedAsCollateral: Boolean!
}

type UserNftCollection  @entity {
  id: ID! # user - collection - tokenId
  user: User!
  collection: NftCollection!
  tokenIds: [BigInt!]!
  amounts: [BigInt!]!
}

