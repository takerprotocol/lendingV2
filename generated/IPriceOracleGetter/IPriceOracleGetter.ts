// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewNFTPrice extends ethereum.Event {
  get params(): NewNFTPrice__Params {
    return new NewNFTPrice__Params(this);
  }
}

export class NewNFTPrice__Params {
  _event: NewNFTPrice;

  constructor(event: NewNFTPrice) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetNFTBankConsumer extends ethereum.Event {
  get params(): SetNFTBankConsumer__Params {
    return new SetNFTBankConsumer__Params(this);
  }
}

export class SetNFTBankConsumer__Params {
  _event: SetNFTBankConsumer;

  constructor(event: SetNFTBankConsumer) {
    this._event = event;
  }

  get nftBankConsumer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetTokenAggregator extends ethereum.Event {
  get params(): SetTokenAggregator__Params {
    return new SetTokenAggregator__Params(this);
  }
}

export class SetTokenAggregator__Params {
  _event: SetTokenAggregator;

  constructor(event: SetTokenAggregator) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get aggregator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IPriceOracleGetter extends ethereum.SmartContract {
  static bind(address: Address): IPriceOracleGetter {
    return new IPriceOracleGetter("IPriceOracleGetter", address);
  }

  getNFTPrice(asset: Address): BigInt {
    let result = super.call("getNFTPrice", "getNFTPrice(address):(uint256)", [
      ethereum.Value.fromAddress(asset)
    ]);

    return result[0].toBigInt();
  }

  try_getNFTPrice(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNFTPrice",
      "getNFTPrice(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAssetPrice(asset: Address): BigInt {
    let result = super.call(
      "getReserveAssetPrice",
      "getReserveAssetPrice(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getReserveAssetPrice(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveAssetPrice",
      "getReserveAssetPrice(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenizedNFTPrice(asset: Address): BigInt {
    let result = super.call(
      "getTokenizedNFTPrice",
      "getTokenizedNFTPrice(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_getTokenizedNFTPrice(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenizedNFTPrice",
      "getTokenizedNFTPrice(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
