{
  "address": "0x97d6d47d324Be259b16C182CFA7287799Ddc514a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "CollateralStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "receiveTNFT",
          "type": "bool"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "nfts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "nfts",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtIndex",
          "type": "uint256"
        }
      ],
      "name": "ReserveDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract ITakerAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_NFT_RESERVES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_RESERVES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "dropReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getNftReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "ReserveConfiguration",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tNFTAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            }
          ],
          "internalType": "struct NFTReserve.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNft",
          "type": "bool"
        }
      ],
      "name": "getReserveConfig",
      "outputs": [
        {
          "internalType": "ReserveConfiguration",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "ReserveConfiguration",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "debtIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "depositRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "tTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateCalculatorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            }
          ],
          "internalType": "struct Reserve.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedDebtScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedLiquidityScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservesList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserConfig",
      "outputs": [
        {
          "internalType": "UserConfiguration",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "UserNftConfiguration",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "borrowableLiq",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftLiq",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateralInEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebtInEth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ltv",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liqThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hf",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserVariableCalculator.StateVar",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "ReserveConfiguration",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tNFTAddress",
          "type": "address"
        }
      ],
      "name": "initNFTReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "ReserveConfiguration",
          "name": "configuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITakerAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "receiveTNFT",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNft",
          "type": "bool"
        },
        {
          "internalType": "ReserveConfiguration",
          "name": "configuration",
          "type": "uint256"
        }
      ],
      "name": "setReserveConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestRateCalculatorAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateCalculatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "usingAsCollateral",
          "type": "bool"
        }
      ],
      "name": "setUserUsingAsCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceFromBefore",
          "type": "uint256"
        }
      ],
      "name": "validateTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "validateTransferNft",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nfts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd35a67fecc17b674b1939060451b5cc184f1e72a0e8d72a2eba5863d5d8f3ab8",
  "receipt": {
    "to": null,
    "from": "0x33B5606763150120076308076C91F01132A799DA",
    "contractAddress": "0x97d6d47d324Be259b16C182CFA7287799Ddc514a",
    "transactionIndex": 72,
    "gasUsed": "5001892",
    "logsBloom": "0x
    "blockHash": "0xacd3805fec1eb05725fb9c0277572d195548b461153ff1a566aaf2f4920f988d",
    "transactionHash": "0xd35a67fecc17b674b1939060451b5cc184f1e72a0e8d72a2eba5863d5d8f3ab8",
    "logs": [],
    "blockNumber": 8770007,
    "cumulativeGasUsed": "21156238",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "74859cd56720769ef1d216a6b01bc192",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CollateralStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCovered\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveTNFT\",\"type\":\"bool\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ITakerAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_NFT_RESERVES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_RESERVES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"dropReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getNftReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"ReserveConfiguration\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"struct NFTReserve.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"}],\"name\":\"getReserveConfig\",\"outputs\":[{\"internalType\":\"ReserveConfiguration\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"ReserveConfiguration\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debtIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"depositRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"tTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateCalculatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"struct Reserve.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedDebtScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedLiquidityScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfig\",\"outputs\":[{\"internalType\":\"UserConfiguration\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"UserNftConfiguration\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowableLiq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftLiq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hf\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVariableCalculator.StateVar\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"ReserveConfiguration\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tNFTAddress\",\"type\":\"address\"}],\"name\":\"initNFTReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"ReserveConfiguration\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITakerAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveTNFT\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"},{\"internalType\":\"ReserveConfiguration\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"name\":\"setReserveConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateCalculatorAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateCalculatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUsingAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromBefore\",\"type\":\"uint256\"}],\"name\":\"validateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validateTransferNft\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Taker\",\"details\":\"Core functions of Taker lending protocol*\",\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256,address)\":{\"details\":\"Borrows amount of asset if have enough collaterals. Receives corresponding debt tokens      User can borrow from another address if credit is delegated\",\"params\":{\"amount\":\"The amount to borrow\",\"asset\":\"The address of the asset to borrow\",\"from\":\"Address that receving the debt.*\"}},\"deposit(address,uint256,address)\":{\"details\":\"Deposits an `amount` of borrowable underlying asset into the reserve, receives overlying tTokens.\",\"params\":{\"amount\":\"The amount to be deposited\",\"asset\":\"The address of the underlying asset to deposit\",\"to\":\"The address receives the tTokens*\"}},\"depositNFTs(address[],uint256[],uint256[],address)\":{\"details\":\"Deposits an `amount` of NFT with certain tokenId as collateral, receiving in return overlying tNFT. - E.g. User deposits 1 PUNK and gets in return 1 tPUNK\",\"params\":{\"amounts\":\"The amounts to be deposited, 1 if it's ERC721\",\"nfts\":\"The address of the NFTs to deposit\",\"to\":\"The address that will receive the tNFT, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of tNFT   is a different wallet*\",\"tokenIds\":\"The tokenIds to be deposited\"}},\"dropReserve(address)\":{\"details\":\"Drop reserve\",\"params\":{\"asset\":\"The underlying asset of the reserve*\"}},\"getAssetValues(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The total liquidity and debt in ETH\"}},\"getNftReserveData(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve data*\"}},\"getPoolValues()\":{\"returns\":{\"_0\":\"The borrowable liquidity, NFT liquidity, total debt in ETH\"}},\"getReserveConfig(address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"isNft\":\"Whether the asset is NFT\"},\"returns\":{\"_0\":\"The configuration of the reserve*\"}},\"getReserveData(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve data*\"}},\"getReserveNormalizedDebtScale(address)\":{\"params\":{\"asset\":\"The address of the underlying asset\"},\"returns\":{\"_0\":\"The normalized debt scale factor\"}},\"getReserveNormalizedLiquidityScale(address)\":{\"params\":{\"asset\":\"The address of the underlying asset\"},\"returns\":{\"_0\":\"The normalized income scale factor\"}},\"getReservesList()\":{\"returns\":{\"_0\":\"The reserve list\",\"_1\":\"The nft reserve list*\"}},\"getUserAssetValues(address,address)\":{\"params\":{\"asset\":\"The address of the asset\",\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The  liquidity, debt, and collateral of asset in ETH\"}},\"getUserConfig(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The configuration of the user for borrowable asset\",\"_1\":\"The configuration of the user for NFTs*\"}},\"getUserState(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The calculated state variables\"}},\"initNFTReserve(address,uint256,address)\":{\"details\":\"Initializes a NFT reserve, assigning an tToken\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"configuration\":\"The configuration of the asset\",\"tNFTAddress\":\"The address of the associated tNFT*\"}},\"initReserve(address,uint256,address,address,address)\":{\"details\":\"Initializes a reserve, assigning an tToken, debt token and an interest rate strategy\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"configuration\":\"The configuration of the asset\",\"debtTokenAddress\":\"The address of the associated DebtToken\",\"interestRateStrategyAddress\":\"The address of the interest rate strategy contract*\",\"tTokenAddress\":\"The address of the associated tToken\"}},\"initialize(address)\":{\"details\":\"Called by proxy contract\",\"params\":{\"provider\":\"The address of the LendingPoolAddressesProvider*\"}},\"liquidate(address,uint256,address,address,address,bool)\":{\"details\":\"Liquidates a position if its Health Factor drops below 1\",\"params\":{\"debt\":\"The address of the underlying borrowed asset to be repaid with the liquidation\",\"nft\":\"The addresse of nft to be liquidated\",\"receiveTNFT\":\"Bool value to control send TNFT or underlying asset to the liquidator*\",\"to\":\"The address receiving the liuquidated nft/tNft\",\"tokenId\":\"The tokenId to be liquidated\",\"user\":\"The address of the borrower getting liquidated\"}},\"repay(address,uint256,address)\":{\"params\":{\"amount\":\"The amount to repay\",\"asset\":\"The address of the asset to borrow\",\"to\":\"Address which debt token is burnt\"},\"returns\":{\"_0\":\"The repaid amount*\"}},\"setReserveConfig(address,bool,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"configuration\":\"The new configuration*\",\"isNft\":\"Whether the asset is NFT\"}},\"setReserveInterestRateCalculatorAddress(address,address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"interestRateCalculatorAddress\":\"The address of the interest rate calculator*\"}},\"setUserUsingAsCollateral(address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset\",\"usingAsCollateral\":\"`true` if set as collateral, `false` otherwise*\"}},\"validateTransfer(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount to transfer\",\"asset\":\"The address of the underlying asset of the tToken\",\"balanceFromBefore\":\"The tToken balance of `from` address before transfer\",\"from\":\"The address which tToken is transferred out\",\"to\":\"The address receiving the tToken\"}},\"validateTransferNft(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount to transfer\",\"asset\":\"The address of the underlying asset of the tNft\",\"from\":\"The address which tNft is transferred out\",\"to\":\"The address receiving the tNft\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Withdraws borrowable asset from reserve\",\"params\":{\"amount\":\"The underlying amount to be withdrawn        type(uint256).max if withdraw full tToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"Address that will receive the underlying*\"}},\"withdrawNFTs(address[],uint256[],uint256[],address)\":{\"details\":\"Withdraws an `amount` of NFT with certain tokenId, burning the equivalent tNFT owned E.g. User has 1 tPUNK, calls withdraw() and receives 1 PUNK, burning the 1 tPUNK\",\"params\":{\"amounts\":\"The amounts to be withdrawn, 1 if it's ERC721        type(uint256).max in order to withdraw the whole tNFT balance\",\"nfts\":\"The addresses of the NFTs to withdraw\",\"to\":\"Address that will receive the underlying*\",\"tokenIds\":\"The tokenIds to be withdrawn\"}}},\"title\":\"LendingPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESS_PROVIDER()\":{\"notice\":\"Auto generated function to get address provider address\"},\"getAssetValues(address)\":{\"notice\":\"Get liquidity and debt of given asset\"},\"getNftReserveData(address)\":{\"notice\":\"Returns the reserve data\"},\"getPoolValues()\":{\"notice\":\"Get the pool's liquidity of all borrowable and NFT reserves and total debt\"},\"getReserveConfig(address,bool)\":{\"notice\":\"Returns the reserve configuration of the asset\"},\"getReserveData(address)\":{\"notice\":\"Returns the reserve data\"},\"getReserveNormalizedDebtScale(address)\":{\"notice\":\"Get the normalized debt scale of the asset\"},\"getReserveNormalizedLiquidityScale(address)\":{\"notice\":\"Get the normalized income scale of the asset\"},\"getReservesList()\":{\"notice\":\"Returns the reserve list (both reserve and nft reserve)\"},\"getUserAssetValues(address,address)\":{\"notice\":\"Get user's liquidity, debt, and collateral in given asset\"},\"getUserConfig(address)\":{\"notice\":\"Returns the configuration of the user\"},\"getUserState(address)\":{\"notice\":\"Get the user's state variables\"},\"liquidate(address,uint256,address,address,address,bool)\":{\"notice\":\"Only allow liquidate one token in one transaction\"},\"repay(address,uint256,address)\":{\"notice\":\"Repays amount of asset and burn corresponding debt tokens\"},\"setReserveConfig(address,bool,uint256)\":{\"notice\":\"Sets the nft reserve configuration\"},\"setReserveInterestRateCalculatorAddress(address,address)\":{\"notice\":\"Updates the address of the interest rate calculator\"},\"setUserUsingAsCollateral(address,bool)\":{\"notice\":\"Sets whether to use borrowable asset as collateral\"},\"validateTransfer(address,address,address,uint256,uint256)\":{\"notice\":\"Validate tToken transfer\"},\"validateTransferNft(address,address,address,uint256)\":{\"notice\":\"Validate tNft transfer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/lendingpool/LendingPool.sol\":\"LendingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IInterestRateCalculator\\n * @dev Defines interface of interest rate calculator\\n * @author Taker\\n */\\ninterface IInterestRateCalculator {\\n  /**\\n   * @notice Returns the max borrow rate\\n   * @return The max borrow rate, in ray\\n   **/\\n  function getMaxBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the interest rates depending on the reserve's states and configurations\\n   * @param totalLiquidity The current total liquidity\\n   * @param totalDebt The current total debt\\n   * @param reserveFactor The reserve factor\\n   * @return depositRate The deposit rate in ray\\n   * @return borrowRate The borrow rate in ray\\n   **/\\n  function calculateInterestRates(\\n    uint256 totalLiquidity,\\n    uint256 totalDebt,\\n    uint256 reserveFactor\\n  ) external view returns (uint256 depositRate, uint256 borrowRate);\\n}\\n\",\"keccak256\":\"0x8509f8e1d4c0b53066c0ca045fbf120bf4b943fe4654dccc344e6f6d9bd9c1fc\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {ITakerAddressesProvider} from \\\"./configuration/ITakerAddressesProvider.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/types/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../libraries/types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../libraries/types/UserNftConfiguration.sol\\\";\\nimport {Reserve} from \\\"../libraries/types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../libraries/types/NFTReserve.sol\\\";\\nimport {UserVariableCalculator} from \\\"../libraries/core/UserVariableCalculator.sol\\\";\\n\\n/**\\n * @title ILendingPool\\n * @author Taker\\n * @notice Defines the interface for lendingpool\\n **/\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param user The address initiates the deposit\\n   * @param to The address receiving the tToken\\n   * @param amount The amount deposited\\n   **/\\n  event Deposited(address indexed asset, address user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on depositNFTs()\\n   * @param nfts The list of underlying NFTs address of the collaterals\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the tNFTs\\n   * @param tokenIds The list of tokenIds deposited\\n   * @param amounts The list of amount deposited\\n   **/\\n  event NFTsDeposited(\\n    address[] nfts,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param asset The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdraw\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdrawn(address indexed asset, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on withdrawNFTs()\\n   * @param nfts The list of underlying NFTs address of the collaterals\\n   * @param user The address initiating the withdrawn\\n   * @param to The address that will receive the underlying nfts\\n   * @param tokenIds The list of tokenIds withdrawn\\n   * @param amounts The list of amount withdrawn\\n   **/\\n  event NFTsWithdrawn(\\n    address[] nfts,\\n    address indexed user,\\n    address indexed to,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow()\\n   * @param asset The address of the asset to borrow\\n   * @param from Address that receving the debt\\n   * @param to Address taht receving the underlying\\n   * @param amount The amount to borrow\\n   * @param borrowRate The borrow rate after the borrow\\n   **/\\n  event Borrowed(\\n    address indexed asset,\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount,\\n    uint256 borrowRate\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param asset The address of the underlying asset\\n   * @param initiator The user performs the repay\\n   * @param to The address which debt is repaid\\n   * @param amount The repaid amount\\n   **/\\n  event Repaid(\\n    address indexed asset,\\n    address indexed initiator,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on liquidate()\\n   * @param nft The address of nft liquidated\\n   * @param tokenId The tokenId liquidated\\n   * @param amount The amount liquidated\\n   * @param debt The amount of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtCovered The debt repaid by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param to The address receiving the nft/tNft\\n   * @param receiveTNFT Bool value to control send TNFT or underlying asset to the liquidator\\n   **/\\n  event Liquidated(\\n    address nft,\\n    uint256 tokenId,\\n    uint256 amount,\\n    address debt,\\n    address indexed user,\\n    uint256 debtCovered,\\n    address indexed liquidator,\\n    address indexed to,\\n    bool receiveTNFT\\n  );\\n\\n  /**\\n   * @dev Emitted after interest rate is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param depositRate The new deposit rate\\n   * @param borrowRate The new borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param debtIndex The new debt index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed asset,\\n    uint256 depositRate,\\n    uint256 borrowRate,\\n    uint256 liquidityIndex,\\n    uint256 debtIndex\\n  );\\n\\n  /**\\n   * @dev Emitted after when using as collateral configuration is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param user The user who's collateral configuration is updated\\n   * @param status Whether is using as collateral\\n   **/\\n  event CollateralStatusUpdated(address indexed asset, address indexed user, bool status);\\n\\n  /**\\n   * @dev Deposits an `amount` of borrowable underlying asset into the reserve, receives overlying tTokens.\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param to The address receives the tTokens\\n   **/\\n  function deposit(address asset, uint256 amount, address to) external;\\n\\n  /**\\n   * @dev Deposits an `amount` of NFT with certain tokenId as collateral, receiving in return overlying tNFT.\\n   * - E.g. User deposits 1 PUNK and gets in return 1 tPUNK\\n   * @param nfts The address of the NFTs to deposit\\n   * @param tokenIds The tokenIds to be deposited\\n   * @param amounts The amounts to be deposited, 1 if it's ERC721\\n   * @param to The address that will receive the tNFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of tNFT\\n   *   is a different wallet\\n   **/\\n  function depositNFTs(\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws borrowable asset from reserve\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *        type(uint256).max if withdraw full tToken balance\\n   * @param to Address that will receive the underlying\\n   **/\\n  function withdraw(address asset, uint256 amount, address to) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of NFT with certain tokenId, burning the equivalent tNFT owned\\n   * E.g. User has 1 tPUNK, calls withdraw() and receives 1 PUNK, burning the 1 tPUNK\\n   * @param nfts The addresses of the NFTs to withdraw\\n   * @param tokenIds The tokenIds to be withdrawn\\n   * @param amounts The amounts to be withdrawn, 1 if it's ERC721\\n   *        type(uint256).max in order to withdraw the whole tNFT balance\\n   * @param to Address that will receive the underlying\\n   **/\\n  function withdrawNFTs(\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @dev Borrows amount of asset if have enough collaterals. Receives corresponding debt tokens\\n   *      User can borrow from another address if credit is delegated\\n   * @param asset The address of the asset to borrow\\n   * @param amount The amount to borrow\\n   * @param from Address that receving the debt.\\n   **/\\n  function borrow(address asset, uint256 amount, address from) external;\\n\\n  /**\\n   * @notice Repays amount of asset and burn corresponding debt tokens\\n   * @param asset The address of the asset to borrow\\n   * @param amount The amount to repay\\n   * @param to Address which debt token is burnt\\n   * @return The repaid amount\\n   **/\\n  function repay(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @dev Liquidates a position if its Health Factor drops below 1\\n   * @notice Only allow liquidate one token in one transaction\\n   * @param nft The addresse of nft to be liquidated\\n   * @param tokenId The tokenId to be liquidated\\n   * @param debt The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param to The address receiving the liuquidated nft/tNft\\n   * @param receiveTNFT Bool value to control send TNFT or underlying asset to the liquidator\\n   **/\\n  function liquidate(\\n    address nft,\\n    uint256 tokenId,\\n    address debt,\\n    address user,\\n    address to,\\n    bool receiveTNFT\\n  ) external;\\n\\n  /**\\n   * @dev Initializes a reserve, assigning an tToken, debt token and an\\n   * interest rate strategy\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The configuration of the asset\\n   * @param tTokenAddress The address of the associated tToken\\n   * @param debtTokenAddress The address of the associated DebtToken\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    ReserveConfiguration configuration,\\n    address tTokenAddress,\\n    address debtTokenAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @dev Initializes a NFT reserve, assigning an tToken\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The configuration of the asset\\n   * @param tNFTAddress The address of the associated tNFT\\n   **/\\n  function initNFTReserve(\\n    address asset,\\n    ReserveConfiguration configuration,\\n    address tNFTAddress\\n  ) external;\\n\\n  /**\\n   * @dev Drop reserve\\n   * @param asset The underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Validate tToken transfer\\n   * @param asset The address of the underlying asset of the tToken\\n   * @param from The address which tToken is transferred out\\n   * @param to  The address receiving the tToken\\n   * @param amount The amount to transfer\\n   * @param balanceFromBefore The tToken balance of `from` address before transfer\\n   */\\n  function validateTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore\\n  ) external;\\n\\n  /**\\n   * @notice Validate tNft transfer\\n   * @param asset The address of the underlying asset of the tNft\\n   * @param from The address which tNft is transferred out\\n   * @param to  The address receiving the tNft\\n   * @param amount The amount to transfer\\n   */\\n  function validateTransferNft(address asset, address from, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Sets whether to use borrowable asset as collateral\\n   * @param asset The address of the underlying asset\\n   * @param usingAsCollateral `true` if set as collateral, `false` otherwise\\n   **/\\n  function setUserUsingAsCollateral(address asset, bool usingAsCollateral) external;\\n\\n  /**\\n   * @notice Get the normalized income scale of the asset\\n   * @param asset The address of the underlying asset\\n   * @return The normalized income scale factor\\n   */\\n  function getReserveNormalizedLiquidityScale(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the normalized debt scale of the asset\\n   * @param asset The address of the underlying asset\\n   * @return The normalized debt scale factor\\n   */\\n  function getReserveNormalizedDebtScale(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the reserve data\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve data\\n   **/\\n  function getReserveData(address asset) external view returns (Reserve.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the reserve data\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve data\\n   **/\\n  function getNftReserveData(address asset) external view returns (NFTReserve.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the reserve list (both reserve and nft reserve)\\n   * @return The reserve list\\n   * @return The nft reserve list\\n   **/\\n  function getReservesList() external view returns (address[] memory, address[] memory);\\n\\n  /**\\n   * @notice Sets the nft reserve configuration\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param isNft Whether the asset is NFT\\n   * @param configuration The new configuration\\n   **/\\n  function setReserveConfig(address asset, bool isNft, ReserveConfiguration configuration) external;\\n\\n  /**\\n   * @notice Returns the reserve configuration of the asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param isNft Whether the asset is NFT\\n   * @return The configuration of the reserve\\n   **/\\n  function getReserveConfig(address asset, bool isNft) external view returns (ReserveConfiguration);\\n\\n  /**\\n   * @notice Returns the configuration of the user\\n   * @param user The address of the user\\n   * @return The configuration of the user for borrowable asset\\n   * @return The configuration of the user for NFTs\\n   **/\\n  function getUserConfig(\\n    address user\\n  ) external view returns (UserConfiguration, UserNftConfiguration);\\n\\n  /**\\n   * @notice Updates the address of the interest rate calculator\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param interestRateCalculatorAddress The address of the interest rate calculator\\n   **/\\n  function setReserveInterestRateCalculatorAddress(\\n    address asset,\\n    address interestRateCalculatorAddress\\n  ) external;\\n\\n  /**\\n   * @notice Get the pool's liquidity of all borrowable and NFT reserves and total debt\\n   * @return The borrowable liquidity, NFT liquidity, total debt in ETH\\n   */\\n  function getPoolValues() external view returns (uint256, uint256, uint256);\\n\\n  /**\\n   * @notice Get liquidity and debt of given asset\\n   * @param asset The address of the asset\\n   * @return The total liquidity and debt in ETH\\n   */\\n  function getAssetValues(address asset) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Get the user's state variables\\n   * @param user The address of the user\\n   * @return The calculated state variables\\n   */\\n  function getUserState(\\n    address user\\n  ) external view returns (UserVariableCalculator.StateVar memory);\\n\\n  /**\\n   * @notice Get user's liquidity, debt, and collateral in given asset\\n   * @param user The address of the user\\n   * @param asset The address of the asset\\n   * @return The  liquidity, debt, and collateral of asset in ETH\\n   */\\n  function getUserAssetValues(\\n    address user,\\n    address asset\\n  ) external view returns (uint256, uint256, uint256);\\n\\n  /**\\n   * @notice Auto generated function to get address provider address\\n   * @return Address of address provider\\n   */\\n  function ADDRESS_PROVIDER() external view returns (ITakerAddressesProvider);\\n}\\n\",\"keccak256\":\"0x00af85c4b439ef40c87fae4b04b723ae800371f5ec618db204049775a5c7bd82\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/configuration/ITakerAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title ITakerAddressesProvider\\n * @author Taker\\n * @notice Taker protocol addresses provider interface\\n **/\\ninterface ITakerAddressesProvider {\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  /**\\n   *  @dev the contract has no proxy.\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   *  @dev the contract has proxy.\\n   */\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n}\\n\",\"keccak256\":\"0x66557c65129f171247ea4b8d1a32ec04a1e0ed6f549c25590fc06c1c910b903d\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/oracle/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title PriceOracleGetter interface\\n * @author Taker\\n * @notice Interface for the taker price oracle\\n **/\\n\\ninterface IPriceOracleGetter {\\n  /**\\n   * @dev Emitted when new Token Aggregator is set\\n   * @param asset the address of the asset\\n   * @param aggregator the aggregator\\n   **/\\n  event SetTokenAggregator(address asset, address aggregator);\\n\\n  /**\\n   * @dev Emitted when new NFT price is retrieved\\n   * @param asset the address of the asset\\n   * @param price the ETH price of the asset\\n   **/\\n  event NewPrice(address indexed asset, uint256 price);\\n\\n  /**\\n   * @dev returns the reserve asset price in ETH\\n   * @param asset the address of the asset\\n   * @return the ETH price of the asset\\n   **/\\n  function getReserveAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets asset price\\n   * @param asset the address of the asset\\n   * @param price the price to set\\n   */\\n  function setPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x22ff0de533e3736fb3a8ba1a0b8e498977561bece86ccad53e7d115acf301f14\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IScaledERC20} from \\\"./IScaledERC20.sol\\\";\\n\\n/**\\n * @title IDebtToken\\n * @author Taker\\n * @notice Defines the interface of DebtToken\\n **/\\ninterface IDebtToken is IScaledERC20 {\\n  /**\\n   * @notice Emitted after delegation\\n   * @param from The address of the delegator\\n   * @param to The address of the delegatee\\n   * @param asset The address asset\\n   * @param amount The amount delegated\\n   */\\n  event Delegated(address indexed from, address indexed to, address indexed asset, uint256 amount);\\n\\n  /**\\n   * @notice Mint debt token with a scale factor\\n   * @param initiator The address initiates the loan\\n   * @param to The address receives the debt token\\n   * @param amount The amount of tokens getting minted\\n   * @param scaleFactor The factor of the corresponding reserve\\n   **/\\n  function mint(\\n    address initiator,\\n    address to,\\n    uint256 amount,\\n    uint256 scaleFactor\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Delegate borrowing power to the to address\\n   * @param to The address receives borrowing power\\n   * @param amount The amount delegated\\n   **/\\n  function delegate(address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Returns the delegated borrowing power\\n   * @param from The address of the delegator\\n   * @param to The address of the delegatee\\n   * @return The borrowing power delegated\\n   **/\\n  function delegateAllowance(address from, address to) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd0dc15b9eb8a84a2ab1c07f2a3862d4b4cf60e54efd26f1f7b78a81221c7d578\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/IInitializableToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IInitializableToken\\n * @author Taker\\n * @notice Defines the basic interface of initializable TTokens\\n **/\\ninterface IInitializableToken {\\n  /**\\n   * @dev Emitted after initialization of tNFT\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param incentivesController The address of the incentives controller\\n   * @param decimals  The decimals of the token\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 decimals,\\n    string name,\\n    string symbol\\n  );\\n\\n  /**\\n   * @notice Initializes the tToken\\n   * @param pool The address of the associated pool\\n   * @param underlyingAsset The address of the underlying ERC20 asset\\n   * @param incentivesController The address of the incentives controller\\n   * @param decimals  The decimals of the token\\n   * @param namePrefix The name of the token\\n   * @param symbolPrefix The symbol of the token\\n   */\\n  function initialize(\\n    address pool,\\n    address underlyingAsset,\\n    address incentivesController,\\n    uint8 decimals,\\n    string calldata namePrefix,\\n    string calldata symbolPrefix\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6fb5bf2431ea435ccc58803b453c19b57ff3197fc483a941f7618fb378571c5d\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/IScaledERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IInitializableToken} from \\\"./IInitializableToken.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IScaledERC20\\n * @author Taker inspired by the AAVE ScaledBalanceToken implementation\\n * @notice Defines the interface to support scale ERC20.\\n **/\\ninterface IScaledERC20 is IERC20Upgradeable, IInitializableToken {\\n  /**\\n   * @notice Mint token with a scale factor\\n   * @param to The address receives the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param scaleFactor The factor of the corresponding reserve\\n   **/\\n  function mint(\\n    address to,\\n    uint256 amount,\\n    uint256 scaleFactor\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns the token with scaling\\n   * @param from The address from which the debt token will be burned\\n   * @param amount The amount to burn\\n   * @param scaleFactor The factor of the corresponding reserve\\n   **/\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 scaleFactor\\n  ) external;\\n\\n  /**\\n   * @notice Return the scaled balance of the user.\\n   * @dev The scaled balance is balance * current scale fator\\n   * @param account The address to calculate balance\\n   * @return The scaled balance of the account\\n   **/\\n  function compoundedBalanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Return the scaled total supply. (Current total supply of the token * current scale factor)\\n   * @return The scaled total supply\\n   **/\\n  function compoundedTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xad4e9370a906b90fac726c9fd45893a641994ee5ed6a9cd8434732b723446264\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/ITERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IInitializableToken} from \\\"./IInitializableToken.sol\\\";\\n\\n/**\\n * @title ITERC1155\\n * @author Taker\\n * @notice Defines the interface of TERC1155\\n **/\\ninterface ITERC1155 is IInitializableToken {\\n  /**\\n   * @notice Mints tERC1155 to `to` address\\n   * @param to The address receiving the minted nft\\n   * @param tokenId The id of the minted nft\\n   * @param amount The number of nft to mint\\n   */\\n  function mint(address to, uint256 tokenId, uint256 amount) external;\\n\\n  /**\\n   * @notice Burns tERC1155 and sends underlying to the token id owner\\n   * @param from The address from which nft will be burnt\\n   * @param to The address receives the underlying\\n   * @param tokenId The id of the nft to burn\\n   * @param amount The number to burn - type(uint256).max if burn all\\n   **/\\n  function burn(address from, address to, uint256 tokenId, uint256 amount) external;\\n\\n  /**\\n   * @notice Returns the total supply of the tNFT\\n   **/\\n  function totalSupply() external view returns (uint256);\\n\\n  // @notice Returns the name of the TNft\\n  function name() external view returns (string memory);\\n\\n  // @notice Returns the symbol of the TNft\\n  function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x94e1f18d2a11e489c121fb589b5fdaa96c7efbccca34082f9a1917c955bd9575\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/ITERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IInitializableToken} from \\\"./IInitializableToken.sol\\\";\\n\\n/**\\n * @title ITERC20\\n * @author Taker\\n * @notice Defines the interface of TERC20 (TNFT for fractional NFT)\\n **/\\ninterface ITERC20 is IInitializableToken {\\n  /**\\n   * @notice Mints tERC20 to `to` address\\n   * @param to The address receiving the minted certificate token\\n   * @param amount The amount to mint\\n   */\\n  function mint(address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Burns tERC20 and sends underlying to `to` address\\n   * @param from The account address from which tERC20 will be burnt\\n   * @param to The address receives the underlying\\n   * @param amount The amount to burn - type(uint256).max if burn all\\n   **/\\n  function burn(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x469d861736e06ba1206f46f105c448cbdf58fd92c4b04771ed315e41d893fca9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/ITERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IInitializableToken} from \\\"./IInitializableToken.sol\\\";\\n\\n/**\\n * @title ITERC721\\n * @author Taker\\n * @notice Defines the interface of TERC721\\n **/\\ninterface ITERC721 is IInitializableToken {\\n  /**\\n   * @notice Mints tERC721 to `to` address\\n   * @param to The address receiving the minted nft\\n   * @param tokenId The id of the minted nft\\n   */\\n  function mint(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @notice Burns tERC721 and sends underlying to the token id owner\\n   * @param from The account address from which tERC721 will be burnt\\n   * @param to The address receiving the underlying nft\\n   * @param tokenId The id of the nft to burn\\n   **/\\n  function burn(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * @notice Returns the total supply of the tNFT\\n   **/\\n  function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe9b66ea1f1b6a0e93a682d0d687963d69a453b0be739fb523320a9eb5b52e132\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/tokens/ITToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IScaledERC20} from \\\"./IScaledERC20.sol\\\";\\n\\n/**\\n * @title ITToken\\n * @author Taker\\n * @notice Defines the interface of TToken\\n **/\\ninterface ITToken is IScaledERC20 {\\n  /**\\n   * @notice Burns TToken\\n   * @param from The address from which the TToken will be burned\\n   * @param to The receiver of underlying asset\\n   * @param amount The amount to burn - type(uint256).max if burn all\\n   * @param scaleFactor The factor of the corresponding reserve\\n   **/\\n  function burn(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 scaleFactor\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `to` address\\n   * @param to The address receiving the underlying asset\\n   * @param amount The amount to transfer\\n   **/\\n  function transferUnderlying(address to, uint256 amount) external;\\n\\n  /**\\n   * @dev Transfers tToken during liquidation\\n   * @param from The address which tToken is transferred out\\n   * @param to The address receiving the tToken\\n   * @param amount The amount to transfer\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6c8a05c7932ca2e468051110c2699b9b94e9ff15be1e44f06f8d5ecc7790cf4f\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @author Taker\\n * @notice Error message mapping for Taker protocol\\n */\\nlibrary Errors {\\n  string public constant ONLY_POOL_ADMIN = \\\"0\\\";\\n  string public constant ONLY_LENDING_POOL = \\\"1\\\";\\n  string public constant ONLY_LENDING_POOL_CONFIGURATOR = \\\"2\\\";\\n  string public constant INVALID_MINT_AMOUNT = \\\"3\\\";\\n  string public constant INVALID_BURN_AMOUNT = \\\"4\\\";\\n  string public constant TOKEN_NOT_TRANSFERRABLE = \\\"5\\\";\\n  string public constant NOT_TTOKEN = \\\"6\\\";\\n  string public constant INVALID_LTV = \\\"7\\\";\\n  string public constant INVALID_LIQ_THRESHOLD = \\\"8\\\";\\n  string public constant INVALID_DECIMALS = \\\"9\\\";\\n  string public constant INVALID_RESERVE_FACTOR = \\\"10\\\";\\n  string public constant INVALID_AMOUNT = \\\"11\\\";\\n  string public constant INACTIVE_RESERVE = \\\"12\\\";\\n  string public constant FROZEN_RESERVE = \\\"13\\\";\\n  string public constant PAUSED_RESERVE = \\\"14\\\";\\n  string public constant RESERVE_ALREADY_INITIALIZED = \\\"15\\\";\\n  string public constant NONEXIST_RESERVE = \\\"16\\\";\\n  string public constant ZERO_ADDRESS = \\\"17\\\";\\n  string public constant NON_ZERO_TTOKEN_SUPPLY = \\\"18\\\";\\n  string public constant NON_ZERO_DEBT_TOKEN_SUPPLY = \\\"19\\\";\\n  string public constant ARRAY_LENGTH_NOT_MATCH = \\\"20\\\";\\n  string public constant ERC_1155_OR_721_MUST_HAVE_TOKEN_ID = \\\"21\\\";\\n  string public constant USER_BALANCE_NOT_ENOUGH = \\\"22\\\";\\n  string public constant INVALID_INDEX = \\\"23\\\";\\n  string public constant HEALTH_FACTOR_UNDER_THRESHOLD = \\\"24\\\";\\n  string public constant HEALTH_FACTOR_ABOVE_THRESHOLD = \\\"25\\\";\\n  string public constant COLLATERAL_NOT_ENOUGH_FOR_BORROW = \\\"26\\\";\\n  string public constant ZERO_COLLATERAL_BALANCE = \\\"27\\\";\\n  string public constant NO_DEBT_TO_REPAY = \\\"28\\\";\\n  string public constant NOT_A_CONTRACT = \\\"29\\\";\\n  string public constant NO_MORE_RESERVES_ALLOWED = \\\"30\\\";\\n  string public constant NO_MORE_NFT_RESERVES_ALLOWED = \\\"31\\\";\\n  string public constant ZERO_BALANCE = \\\"32\\\";\\n  string public constant LIQ_THRESHOLD_LESS_THAN_LTV = \\\"33\\\";\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"34\\\";\\n  string public constant LIQUIDATING_COLLATERAL_EXCEED_DEBT_LIMIT = \\\"35\\\";\\n  string public constant INSUFFICIENT_ETH_BALANCE = \\\"36\\\";\\n  string public constant INSUFFICIENT_REAPY_ETH_BALANCE = \\\"37\\\";\\n  string public constant SEND_ETH_FAILED = \\\"38\\\";\\n  string public constant RECEIVE_NOT_ALLOWED = \\\"39\\\";\\n  string public constant INVALID_DEPOSIT_CAP = \\\"40\\\";\\n  string public constant INVALID_BORROW_CAP = \\\"41\\\";\\n  string public constant DEPOSIT_CAP_EXCEEDED = \\\"42\\\";\\n  string public constant BORROW_CAP_EXCEEDED = \\\"43\\\";\\n  string public constant ONLY_OWNER_CAN_BURN = \\\"44\\\";\\n  string public constant DEBT_ALLOWANCE_OVERREACH = \\\"45\\\";\\n  string public constant ASSET_NOT_COLLATERIZABLE = \\\"46\\\";\\n  string public constant INSUFFICIENT_LIQUIDATE_ETH_BALANCE = \\\"47\\\";\\n  string public constant NOT_PUNK_OWNER = \\\"48\\\";\\n\\n  /**\\n   * @dev Helper function to generate error messages\\n   * @param component The name of the component that produces the error\\n   * @param errCode The error code define in this library\\n   * @return The final error message\\n   **/\\n  function genErrMsg(\\n    string memory component,\\n    string memory errCode\\n  ) external pure returns (string memory) {\\n    return string.concat(component, \\\"_\\\", errCode);\\n  }\\n}\\n\",\"keccak256\":\"0xb50bc072a1be23f6ff1d163602abfcb2a7ab438b9e96bac5d90f3a11647c19b8\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/BorrowExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IDebtToken} from \\\"../../interfaces/tokens/IDebtToken.sol\\\";\\nimport {ITToken} from \\\"../../interfaces/tokens/ITToken.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {Reserve} from \\\"../types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../types/NFTReserve.sol\\\";\\nimport {UserConfiguration} from \\\"../types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../types/UserNftConfiguration.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"../types/ReserveConfiguration.sol\\\";\\nimport {UserVariableCalculator} from \\\"./UserVariableCalculator.sol\\\";\\nimport {Validator} from \\\"./Validator.sol\\\";\\n\\n/**\\n * @title BorrowExecutor library\\n * @author Taker\\n * @notice Implements functions to do borrow and repay\\n */\\nlibrary BorrowExecutor {\\n  using Reserve for Reserve.ReserveData;\\n  using SafeERC20 for IERC20;\\n\\n  string public constant NAME = \\\"BE\\\";\\n\\n  // See ILendingPool for descriptions\\n  event Borrowed(\\n    address indexed asset,\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount,\\n    uint256 borrowRate\\n  );\\n\\n  // See ILendingPool for descriptions\\n  event Repaid(\\n    address indexed asset,\\n    address indexed initiator,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  // See ILendingPool for descriptions\\n  event CollateralStatusUpdated(address indexed asset, address indexed user, bool status);\\n\\n  /**\\n   * @dev Executes borrow\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param userConfigs The configuration of the user\\n   * @param params other params\\n   * @param amount The underlying amount to borrow\\n   * @param asset The address of the underlying asset to borrow\\n   * @param from Address that executes borrow\\n   **/\\n  function borrow(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    mapping(address => UserConfiguration) storage userConfigs,\\n    UserVariableCalculator.CalUserStateParam memory params,\\n    uint256 amount,\\n    address asset,\\n    address from\\n  ) external {\\n    Reserve.ReserveData storage reserve = reserves[asset];\\n\\n    reserve.updateState();\\n    Validator.validateBorrow(\\n      asset,\\n      reserve,\\n      amount,\\n      reserves,\\n      nftReserves,\\n      reserveList,\\n      nftReserveList,\\n      params\\n    );\\n\\n    bool isFirstBorrowing = IDebtToken(reserve.debtTokenAddress).mint(\\n      msg.sender,\\n      from,\\n      amount,\\n      reserve.debtIndex\\n    );\\n    if (isFirstBorrowing) {\\n      userConfigs[from] = params.userConfig.setBorrowing(reserve.id, true);\\n    }\\n\\n    address tToken = reserve.tTokenAddress;\\n    reserve.updateInterestRates(asset, tToken);\\n\\n    ITToken(tToken).transferUnderlying(msg.sender, amount);\\n\\n    emit Borrowed(asset, from, msg.sender, amount, reserve.borrowRate);\\n  }\\n\\n  /**\\n   * @dev Execute repay\\n   * @param reserve Reserve of the corresponding asset\\n   * @param userConfigs The configuration of the user\\n   * @param asset The address of the underlying asset to repay\\n   * @param amount The amount to repay\\n   * @param to Address that will receive the underlying\\n   **/\\n  function repay(\\n    Reserve.ReserveData storage reserve,\\n    mapping(address => UserConfiguration) storage userConfigs,\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256) {\\n    reserve.updateState();\\n    uint256 debt = IDebtToken(reserve.debtTokenAddress).compoundedBalanceOf(to);\\n\\n    Validator.validateRepay(reserve, amount, debt);\\n\\n    if (amount > debt) {\\n      amount = debt;\\n    }\\n    IDebtToken(reserve.debtTokenAddress).burn(to, amount, reserve.debtIndex);\\n\\n    address tToken = reserve.tTokenAddress;\\n    reserve.updateInterestRates(asset, tToken);\\n\\n    if (debt - amount == 0) {\\n      userConfigs[to] = userConfigs[to].setBorrowing(reserve.id, false);\\n    }\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, tToken, amount);\\n    emit Repaid(asset, msg.sender, to, amount);\\n\\n    return amount;\\n  }\\n}\\n\",\"keccak256\":\"0x00b5d3c94e35f1cc173bce41567542d080686275c66f9d915b42bc5fc3cfe3eb\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/DepositExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\nimport {ITToken} from \\\"../../interfaces/tokens/ITToken.sol\\\";\\nimport {ITERC20} from \\\"../../interfaces/tokens/ITERC20.sol\\\";\\nimport {ITERC721} from \\\"../../interfaces/tokens/ITERC721.sol\\\";\\nimport {ITERC1155} from \\\"../../interfaces/tokens/ITERC1155.sol\\\";\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {Reserve} from \\\"../types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../types/NFTReserve.sol\\\";\\nimport {UserConfiguration} from \\\"../types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../types/UserNftConfiguration.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"../types/ReserveConfiguration.sol\\\";\\nimport {UserVariableCalculator} from \\\"./UserVariableCalculator.sol\\\";\\nimport {Validator} from \\\"./Validator.sol\\\";\\n\\n/**\\n * @title DepoistExecutor library\\n * @author Taker\\n * @notice Implements functions to do depoist and withdraw\\n */\\nlibrary DepositExecutor {\\n  using WadRayMath for uint256;\\n  using Reserve for Reserve.ReserveData;\\n  using NFTReserve for NFTReserve.ReserveData;\\n  using SafeERC20 for IERC20;\\n\\n  string public constant NAME = \\\"DE\\\";\\n\\n  // See ILendingPool for descriptions\\n  event Deposited(address indexed asset, address user, address indexed to, uint256 amount);\\n\\n  // See ILendingPool for descriptions\\n  event NFTsDeposited(\\n    address[] nfts,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  // See ILendingPool for descriptions\\n  event Withdrawn(address indexed asset, address indexed user, address indexed to, uint256 amount);\\n\\n  // See ILendingPool for descriptions\\n  event NFTsWithdrawn(\\n    address[] nfts,\\n    address indexed user,\\n    address indexed to,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  // See ILendingPool for descriptions\\n  event CollateralStatusUpdated(address indexed asset, address indexed user, bool status);\\n\\n  /**\\n   * @dev Executes deposit\\n   * @param reserve The reserve of the asset\\n   * @param amount The amount to deposit\\n   * @param asset The asset to depoist\\n   * @param to The address receives the tTokens\\n   **/\\n  function deposit(\\n    Reserve.ReserveData storage reserve,\\n    uint256 amount,\\n    address asset,\\n    address to\\n  ) external {\\n    Validator.performBaseCheck(reserve.configuration, amount, true);\\n\\n    address tToken = reserve.tTokenAddress;\\n    uint256 currLiqIdx = reserve.updateState();\\n\\n    uint256 depositCap = reserve.configuration.getDepositCap();\\n    require(\\n      depositCap == 0 ||\\n        (IERC20(tToken).totalSupply().rayMul(currLiqIdx) + amount) <=\\n        depositCap * (10 ** reserve.configuration.getDecimals()),\\n      Errors.genErrMsg(NAME, Errors.DEPOSIT_CAP_EXCEEDED)\\n    );\\n    IERC20(asset).safeTransferFrom(msg.sender, tToken, amount);\\n    ITToken(tToken).mint(to, amount, reserve.liquidityIndex);\\n\\n    reserve.updateInterestRates(asset, tToken);\\n\\n    emit Deposited(asset, msg.sender, to, amount);\\n  }\\n\\n  /**\\n   * @dev Executes deposit nft\\n   * @param nftReserves The state of all nft reserves\\n   * @param userNftConfigs The configuration for user's nft\\n   * @param nfts The address of the NFTs to deposit\\n   * @param tokenIds The tokenIds to be deposited\\n   * @param amounts The amounts to be deposited, 1 if it's ERC721\\n   * @param to The address that will receive the tNFT\\n   **/\\n  function depositNFTs(\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(address => UserNftConfiguration) storage userNftConfigs,\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external {\\n    require(\\n      nfts.length == tokenIds.length && nfts.length == amounts.length,\\n      Errors.genErrMsg(NAME, Errors.ARRAY_LENGTH_NOT_MATCH)\\n    );\\n\\n    for (uint256 i = 0; i < nfts.length; i++) {\\n      address nft = nfts[i];\\n      NFTReserve.ReserveData storage nftReserve = nftReserves[nft];\\n      ReserveConfiguration configuration = nftReserve.configuration;\\n      Validator.performBaseCheck(configuration, amounts[i], true);\\n      {\\n        ReserveConfigurator.TokenType tokenType = configuration.getTokenType();\\n        address tNFT = nftReserve.tNFTAddress;\\n        if (tokenType == ReserveConfigurator.TokenType.ERC20) {\\n          IERC20(nft).safeTransferFrom(msg.sender, tNFT, amounts[i]);\\n          ITERC20(tNFT).mint(to, amounts[i]);\\n        } else if (tokenType == ReserveConfigurator.TokenType.ERC721) {\\n          IERC721(nft).safeTransferFrom(msg.sender, tNFT, tokenIds[i]);\\n          ITERC721(tNFT).mint(to, tokenIds[i]);\\n        } else {\\n          IERC1155(nft).safeTransferFrom(msg.sender, tNFT, tokenIds[i], amounts[i], \\\"\\\");\\n          ITERC1155(tNFT).mint(to, tokenIds[i], amounts[i]);\\n        }\\n      }\\n\\n      userNftConfigs[to] = userNftConfigs[to].setUsingAsCollateral(nftReserve.id, true);\\n    }\\n\\n    emit NFTsDeposited(nfts, msg.sender, to, tokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev Execute withdraw\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param userConfigs The configuration of the user\\n   * @param params other params\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   * @param to Address that will receive the underlying\\n   **/\\n  function withdraw(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    mapping(address => UserConfiguration) storage userConfigs,\\n    UserVariableCalculator.CalUserStateParam memory params,\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external {\\n    Reserve.ReserveData storage reserve = reserves[asset];\\n    reserve.updateState();\\n\\n    address tToken = reserve.tTokenAddress;\\n    uint256 withdrawAmount = amount;\\n    uint256 userBalance = ITToken(tToken).compoundedBalanceOf(msg.sender);\\n    if (amount == type(uint256).max) {\\n      withdrawAmount = userBalance;\\n    }\\n\\n    Validator.performBaseCheck(reserve.configuration, amount, false);\\n\\n    ITToken(tToken).burn(msg.sender, to, withdrawAmount, reserve.liquidityIndex);\\n\\n    if (params.userConfig.isUsingAsCollateral(reserve.id)) {\\n      if (params.userConfig.isBorrowingAny()) {\\n        Validator.validateUserHealth(\\n          reserves,\\n          nftReserves,\\n          reserveList,\\n          nftReserveList,\\n          UserVariableCalculator.CalUserStateParam({\\n            userConfig: params.userConfig,\\n            userNFTConfig: params.userNFTConfig,\\n            reserveCount: params.reserveCount,\\n            nftReserveCount: params.nftReserveCount,\\n            user: params.user,\\n            oracle: params.oracle\\n          })\\n        );\\n      }\\n      if (withdrawAmount == userBalance) {\\n        userConfigs[msg.sender] = params.userConfig.setUsingAsCollateral(reserve.id, false);\\n        emit CollateralStatusUpdated(asset, msg.sender, false);\\n      }\\n    }\\n    reserve.updateInterestRates(asset, tToken);\\n\\n    emit Withdrawn(asset, msg.sender, to, amount);\\n  }\\n\\n  /**\\n   * @dev Execute withdrawNFTs\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param params other params\\n   * @param nfts The address of the NFTs to withdraw\\n   * @param tokenIds The tokenIds to withdraw\\n   * @param amounts The amounts to withdraw, 1 if it's ERC721\\n   * @param to Address that will receive the underlying\\n   **/\\n  function withdrawNFTs(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    UserVariableCalculator.CalUserStateParam memory params,\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external {\\n    require(\\n      nfts.length == tokenIds.length && nfts.length == amounts.length,\\n      Errors.genErrMsg(NAME, Errors.ARRAY_LENGTH_NOT_MATCH)\\n    );\\n\\n    for (uint256 i = 0; i < nfts.length; i++) {\\n      address nft = nfts[i];\\n      NFTReserve.ReserveData storage nftReserve = nftReserves[nft];\\n      ReserveConfiguration configuration = nftReserve.configuration;\\n      Validator.performBaseCheck(configuration, amounts[i], false);\\n      ReserveConfigurator.TokenType tokenType = configuration.getTokenType();\\n      address tNFT = nftReserve.tNFTAddress;\\n      if (tokenType == ReserveConfigurator.TokenType.ERC20) {\\n        ITERC20(tNFT).burn(msg.sender, to, amounts[i]);\\n      } else if (tokenType == ReserveConfigurator.TokenType.ERC721) {\\n        ITERC721(tNFT).burn(msg.sender, to, tokenIds[i]);\\n      } else {\\n        ITERC1155(tNFT).burn(msg.sender, to, tokenIds[i], amounts[i]);\\n      }\\n    }\\n\\n    if (params.userConfig.isBorrowingAny()) {\\n      Validator.validateUserHealth(\\n        reserves,\\n        nftReserves,\\n        reserveList,\\n        nftReserveList,\\n        UserVariableCalculator.CalUserStateParam({\\n          userConfig: params.userConfig,\\n          userNFTConfig: params.userNFTConfig,\\n          reserveCount: params.reserveCount,\\n          nftReserveCount: params.nftReserveCount,\\n          user: params.user,\\n          oracle: params.oracle\\n        })\\n      );\\n    }\\n\\n    emit NFTsWithdrawn(nfts, msg.sender, to, tokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev Execute setUserUsingAsCollateral\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param userConfigs The configuration of the user\\n   * @param params other params\\n   * @param asset The targeting asset\\n   * @param usingAsCollateral Whether to set as collateral\\n   **/\\n  function setUserUsingAsCollateral(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    mapping(address => UserConfiguration) storage userConfigs,\\n    UserVariableCalculator.CalUserStateParam memory params,\\n    address asset,\\n    bool usingAsCollateral\\n  ) external {\\n    Reserve.ReserveData storage reserve = reserves[asset];\\n    ReserveConfiguration reserveConfig = reserves[asset].configuration;\\n    uint256 userBalance = IERC20(reserve.tTokenAddress).balanceOf(msg.sender);\\n    Validator.validateSetUsingAsCollateral(reserveConfig, userBalance, usingAsCollateral);\\n\\n    userConfigs[msg.sender] = params.userConfig.setUsingAsCollateral(reserve.id, usingAsCollateral);\\n    if (!usingAsCollateral) {\\n      Validator.validateUserHealth(\\n        reserves,\\n        nftReserves,\\n        reserveList,\\n        nftReserveList,\\n        UserVariableCalculator.CalUserStateParam({\\n          userConfig: params.userConfig,\\n          userNFTConfig: params.userNFTConfig,\\n          reserveCount: params.reserveCount,\\n          nftReserveCount: params.nftReserveCount,\\n          user: params.user,\\n          oracle: params.oracle\\n        })\\n      );\\n    }\\n\\n    emit CollateralStatusUpdated(asset, msg.sender, usingAsCollateral);\\n  }\\n}\\n\",\"keccak256\":\"0xad67170f4c9aa58a342735d96944493555a784ad618f80759e9f04efee7b0e76\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/LiquidationExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\nimport {IDebtToken} from \\\"../../interfaces/tokens/IDebtToken.sol\\\";\\nimport {ITToken} from \\\"../../interfaces/tokens/ITToken.sol\\\";\\nimport {ITERC20} from \\\"../../interfaces/tokens/ITERC20.sol\\\";\\nimport {ITERC721} from \\\"../../interfaces/tokens/ITERC721.sol\\\";\\nimport {ITERC1155} from \\\"../../interfaces/tokens/ITERC1155.sol\\\";\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\nimport {Reserve} from \\\"../types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../types/NFTReserve.sol\\\";\\nimport {UserConfiguration} from \\\"../types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../types/UserNftConfiguration.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"../types/ReserveConfiguration.sol\\\";\\nimport {UserVariableCalculator} from \\\"./UserVariableCalculator.sol\\\";\\nimport {Validator} from \\\"./Validator.sol\\\";\\n\\n/**\\n * @title LiquidationExecutor library\\n * @author Taker\\n * @notice Implements functions to do liquidation\\n */\\nlibrary LiquidationExecutor {\\n  using Reserve for Reserve.ReserveData;\\n  using NFTReserve for NFTReserve.ReserveData;\\n  using SafeERC20 for IERC20;\\n\\n  string public constant NAME = \\\"LE\\\";\\n  uint8 public constant ETH_DECIMALS = 18;\\n\\n  struct LiquidateParams {\\n    UserVariableCalculator.CalUserStateParam calUserStateParams;\\n    address liquidator;\\n    address to;\\n    address debt;\\n    bool receiveTNFT;\\n  }\\n\\n  // used to avoid stack too deep error\\n  struct LiquidateLocalVars {\\n    address tNFT;\\n    uint256 liqAmountInEth;\\n    uint256 liqAmountInDebtToken;\\n    ReserveConfiguration reserveConfig;\\n    ReserveConfigurator.TokenType tokenType;\\n    UserVariableCalculator.StateVar stateVars;\\n  }\\n\\n  // See ILendingPool for descriptions\\n  event Liquidated(\\n    address nft,\\n    uint256 tokenId,\\n    uint256 amount,\\n    address debt,\\n    address user,\\n    uint256 debtCovered,\\n    address liquidator,\\n    address to,\\n    bool receiveTNFT\\n  );\\n\\n  /**\\n   * @dev Liquidates a position if its Health Factor drops below 1\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param nft The nft to liquidate\\n   * @param tokenId The token id to liquidate\\n   * @param params Other params\\n   **/\\n  function liquidate(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    address nft,\\n    uint256 tokenId,\\n    LiquidateParams memory params\\n  ) external {\\n    LiquidateLocalVars memory vars;\\n    Reserve.ReserveData storage debtReserve = reserves[params.debt];\\n    debtReserve.updateState();\\n\\n    vars.stateVars = UserVariableCalculator.calculateUserStateVariables(\\n      reserves,\\n      nftReserves,\\n      reserveList,\\n      nftReserveList,\\n      params.calUserStateParams\\n    );\\n    vars.reserveConfig = debtReserve.configuration;\\n\\n    Validator.validateLiquidate(nft, vars.reserveConfig, nftReserves, vars.stateVars);\\n\\n    vars.liqAmountInEth = IPriceOracleGetter(params.calUserStateParams.oracle).getReserveAssetPrice(\\n      nft\\n    );\\n    vars.liqAmountInEth =\\n      (vars.stateVars.totalDebtInEth * vars.liqAmountInEth) /\\n      vars.stateVars.totalCollateralInEth;\\n\\n    vars.liqAmountInDebtToken =\\n      (vars.liqAmountInEth * 10 ** debtReserve.configuration.getDecimals()) /\\n      IPriceOracleGetter(params.calUserStateParams.oracle).getReserveAssetPrice(params.debt);\\n\\n    IDebtToken(debtReserve.debtTokenAddress).burn(\\n      params.calUserStateParams.user,\\n      vars.liqAmountInDebtToken,\\n      debtReserve.debtIndex\\n    );\\n\\n    debtReserve.updateInterestRates(params.debt, debtReserve.tTokenAddress);\\n\\n    NFTReserve.ReserveData storage nftReserve = nftReserves[nft];\\n    vars.reserveConfig = nftReserve.configuration;\\n    vars.tokenType = vars.reserveConfig.getTokenType();\\n    vars.tNFT = nftReserve.tNFTAddress;\\n\\n    if (params.receiveTNFT) {\\n      if (vars.tokenType == ReserveConfigurator.TokenType.ERC20) {\\n        IERC20(vars.tNFT).transferFrom(params.calUserStateParams.user, params.to, 1);\\n      } else if (vars.tokenType == ReserveConfigurator.TokenType.ERC721) {\\n        IERC721(vars.tNFT).transferFrom(params.calUserStateParams.user, params.to, tokenId);\\n      } else {\\n        IERC1155(vars.tNFT).safeTransferFrom(\\n          params.calUserStateParams.user,\\n          params.to,\\n          tokenId,\\n          1,\\n          \\\"\\\"\\n        );\\n      }\\n    } else {\\n      if (vars.tokenType == ReserveConfigurator.TokenType.ERC20) {\\n        ITERC20(vars.tNFT).burn(params.calUserStateParams.user, params.to, 1);\\n      } else if (vars.tokenType == ReserveConfigurator.TokenType.ERC721) {\\n        ITERC721(vars.tNFT).burn(params.calUserStateParams.user, params.to, tokenId);\\n      } else {\\n        ITERC1155(vars.tNFT).burn(params.calUserStateParams.user, params.to, tokenId, 1);\\n      }\\n    }\\n\\n    // Transfers the debt asset being repaid to the tToken, where the liquidity is kept\\n    IERC20(params.debt).safeTransferFrom(\\n      params.liquidator,\\n      debtReserve.tTokenAddress,\\n      vars.liqAmountInDebtToken\\n    );\\n\\n    emit Liquidated(\\n      nft,\\n      tokenId,\\n      1,\\n      params.debt,\\n      params.calUserStateParams.user,\\n      vars.liqAmountInDebtToken,\\n      params.liquidator,\\n      params.to,\\n      params.receiveTNFT\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7cbb60ca0b5febb0c0ecc97a4cc0423905a12d8472c5c94426fbe462cf5927d2\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/ReserveVariableCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {Reserve} from \\\"../../libraries/types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../../libraries/types/NFTReserve.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../libraries/math/PercentageMath.sol\\\";\\nimport {ReserveConfiguration} from \\\"../../libraries/types/ReserveConfiguration.sol\\\";\\n\\n/**\\n * @title ReserveVariableCalculator library\\n * @author Taker\\n * @notice Implements functions to calculate variables of the current state of the reserve\\n */\\nlibrary ReserveVariableCalculator {\\n  using Reserve for Reserve.ReserveData;\\n  using NFTReserve for NFTReserve.ReserveData;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  string public constant NAME = \\\"RVC\\\";\\n\\n  struct CalReserveStateParam {\\n    uint256 reserveCount;\\n    uint256 nftReserveCount;\\n    address oracle;\\n  }\\n\\n  function calculateReserveValues(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    address asset,\\n    address oracle\\n  ) public view returns (uint256, uint256) {\\n    uint256 liquidityInETH;\\n    uint256 debtInETH;\\n    if (reserves[asset].id != 0) {\\n      Reserve.ReserveData storage reserve = reserves[asset];\\n      liquidityInETH = reserve.getLiquidityETH(asset, oracle);\\n      debtInETH = reserve.getDebtETH(asset, oracle);\\n    } else if (nftReserves[asset].id != 0) {\\n      NFTReserve.ReserveData storage nftReserve = nftReserves[asset];\\n      liquidityInETH = nftReserve.getLiquidityETH(asset, oracle);\\n    }\\n    return (liquidityInETH, debtInETH);\\n  }\\n\\n  function calculateReserveDebt(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    address asset,\\n    address oracle\\n  ) public view returns (uint256) {\\n    uint256 debtInETH;\\n    if (reserves[asset].id != 0) {\\n      Reserve.ReserveData storage reserve = reserves[asset];\\n      debtInETH = reserve.getDebtETH(asset, oracle);\\n    }\\n    return debtInETH;\\n  }\\n\\n  function calculateTotalDebt(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(uint256 => address) storage reserveList,\\n    uint256 reserveCount,\\n    address oracle\\n  ) public view returns (uint256) {\\n    uint256 debtInETH;\\n    address underlyingAddress;\\n    for (uint256 i = 1; i < reserveCount + 1; i++) {\\n      underlyingAddress = reserveList[i];\\n      if (underlyingAddress == address(0)) {\\n        continue;\\n      }\\n      Reserve.ReserveData storage currentReserve = reserves[underlyingAddress];\\n      debtInETH += currentReserve.getDebtETH(underlyingAddress, oracle);\\n    }\\n    return debtInETH;\\n  }\\n\\n  function calculateBorrowableValues(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(uint256 => address) storage reserveList,\\n    uint256 reserveCount,\\n    address oracle\\n  ) public view returns (uint256, uint256) {\\n    uint256 liquidityInETH;\\n    uint256 debtInETH;\\n    address underlyingAddress;\\n    for (uint256 i = 1; i < reserveCount + 1; i++) {\\n      underlyingAddress = reserveList[i];\\n      if (underlyingAddress == address(0)) {\\n        continue;\\n      }\\n      Reserve.ReserveData storage currentReserve = reserves[underlyingAddress];\\n      liquidityInETH += currentReserve.getLiquidityETH(underlyingAddress, oracle);\\n      debtInETH += currentReserve.getDebtETH(underlyingAddress, oracle);\\n    }\\n    return (liquidityInETH, debtInETH);\\n  }\\n\\n  function calculateNftLiquidity(\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage nftReserveList,\\n    uint256 nftReserveCount,\\n    address oracle\\n  ) public view returns (uint256) {\\n    uint256 liquidityInETH;\\n    address underlyingAddress;\\n    for (uint256 i = 1; i < nftReserveCount + 1; i++) {\\n      underlyingAddress = nftReserveList[i];\\n      if (underlyingAddress == address(0)) {\\n        continue;\\n      }\\n      NFTReserve.ReserveData storage currentReserve = nftReserves[underlyingAddress];\\n      liquidityInETH += currentReserve.getLiquidityETH(underlyingAddress, oracle);\\n    }\\n    return liquidityInETH;\\n  }\\n\\n  function calculateTotalLiquidity(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    CalReserveStateParam memory params\\n  ) public view returns (uint256, uint256, uint256) {\\n    (uint256 borrowableLiq, uint256 borrowableDebt) = calculateBorrowableValues(\\n      reserves,\\n      reserveList,\\n      params.reserveCount,\\n      params.oracle\\n    );\\n    uint256 nftLiq = calculateNftLiquidity(\\n      nftReserves,\\n      nftReserveList,\\n      params.nftReserveCount,\\n      params.oracle\\n    );\\n    return (borrowableLiq, nftLiq, borrowableDebt);\\n  }\\n}\\n\",\"keccak256\":\"0x08444788d15b8344ca6ecf159452927b0337f8404e5de9db078f610b88b55fe3\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/UserVariableCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {Reserve} from \\\"../../libraries/types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../../libraries/types/NFTReserve.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../libraries/math/PercentageMath.sol\\\";\\nimport {UserConfiguration} from \\\"../../libraries/types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../../libraries/types/UserNftConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../../libraries/types/ReserveConfiguration.sol\\\";\\n\\n/**\\n * @title UserVariableCalculator library\\n * @author Taker\\n * @notice Implements functions to calculate variables of the current state of the user\\n */\\nlibrary UserVariableCalculator {\\n  using Reserve for Reserve.ReserveData;\\n  using NFTReserve for NFTReserve.ReserveData;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  string public constant NAME = \\\"UVC\\\";\\n\\n  // used to avoid stack too deep err\\n  struct CalculateUserStateVariableLocalVar {\\n    uint256 borrowableLiquidityInEth;\\n    uint256 nftLiquidityInEth;\\n    uint256 totalCollateralInEth;\\n    uint256 totalCollateralWithLtvInEth;\\n    uint256 totalCollateralWithLiqThreshInEth;\\n    uint256 totalDebtInEth;\\n    uint256 liquidityInEth;\\n    uint256 avgLiqThreshold;\\n    address underlyingAddress;\\n  }\\n\\n  struct CalUserStateParam {\\n    UserConfiguration userConfig;\\n    UserNftConfiguration userNFTConfig;\\n    uint256 reserveCount;\\n    uint256 nftReserveCount;\\n    address user;\\n    address oracle;\\n  }\\n\\n  struct StateVar {\\n    uint256 borrowableLiq;\\n    uint256 nftLiq;\\n    uint256 totalCollateralInEth;\\n    uint256 totalDebtInEth;\\n    uint256 ltv;\\n    uint256 liqThreshold;\\n    uint256 hf;\\n  }\\n\\n  /**\\n   * @dev Calculates the user data across all the reserves.\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param params other params\\n   * @return state variables\\n   **/\\n  function calculateUserStateVariables(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    CalUserStateParam memory params\\n  ) public view returns (StateVar memory) {\\n    // total liquidity here only refer to collaterals\\n    CalculateUserStateVariableLocalVar memory vars;\\n    uint256 i;\\n    // Calculate for borrowable reserves\\n    for (i = 1; i < params.reserveCount + 1; i++) {\\n      bool isCollateral = params.userConfig.isUsingAsCollateral(i);\\n      bool isBorrowing = params.userConfig.isBorrowing(i);\\n      vars.underlyingAddress = reserveList[i];\\n      if (vars.underlyingAddress == address(0)) {\\n        continue;\\n      }\\n      Reserve.ReserveData storage currentReserve = reserves[vars.underlyingAddress];\\n      ReserveConfiguration config = currentReserve.configuration;\\n      vars.liquidityInEth = currentReserve.getUserLiquidityETH(\\n        vars.underlyingAddress,\\n        params.user,\\n        params.oracle\\n      );\\n      vars.borrowableLiquidityInEth += vars.liquidityInEth;\\n      if (isCollateral && config.getLiquidationThreshold() != 0) {\\n        vars.totalCollateralInEth += vars.liquidityInEth;\\n        vars.totalCollateralWithLtvInEth += vars.liquidityInEth * config.getLtv();\\n        vars.totalCollateralWithLiqThreshInEth +=\\n          vars.liquidityInEth *\\n          config.getLiquidationThreshold();\\n      }\\n      if (isBorrowing) {\\n        vars.totalDebtInEth += currentReserve.getUserDebtETH(\\n          vars.underlyingAddress,\\n          params.user,\\n          params.oracle\\n        );\\n      }\\n    }\\n    // Calculate for nft reserves\\n    if (params.userNFTConfig.isUsingAsCollateralAny()) {\\n      for (i = 1; i < params.nftReserveCount + 1; i++) {\\n        vars.underlyingAddress = nftReserveList[i];\\n        if (vars.underlyingAddress == address(0)) {\\n          continue;\\n        }\\n        NFTReserve.ReserveData storage currentReserve = nftReserves[vars.underlyingAddress];\\n        ReserveConfiguration config = currentReserve.configuration;\\n        vars.liquidityInEth = currentReserve.getUserLiquidityETH(\\n          vars.underlyingAddress,\\n          params.user,\\n          params.oracle\\n        );\\n        vars.nftLiquidityInEth += vars.liquidityInEth;\\n        vars.totalCollateralInEth += vars.liquidityInEth;\\n        vars.totalCollateralWithLtvInEth += vars.liquidityInEth * config.getLtv();\\n        vars.totalCollateralWithLiqThreshInEth +=\\n          vars.liquidityInEth *\\n          config.getLiquidationThreshold();\\n      }\\n    }\\n\\n    vars.avgLiqThreshold = (vars.totalCollateralInEth == 0)\\n      ? 0\\n      : vars.totalCollateralWithLiqThreshInEth / vars.totalCollateralInEth;\\n\\n    return\\n      StateVar({\\n        borrowableLiq: vars.borrowableLiquidityInEth,\\n        nftLiq: vars.nftLiquidityInEth,\\n        totalCollateralInEth: vars.totalCollateralInEth,\\n        totalDebtInEth: vars.totalDebtInEth,\\n        ltv: (vars.totalCollateralInEth == 0)\\n          ? 0\\n          : vars.totalCollateralWithLtvInEth / vars.totalCollateralInEth,\\n        liqThreshold: vars.avgLiqThreshold,\\n        hf: calculateHealthFactor(\\n          vars.totalCollateralInEth,\\n          vars.totalDebtInEth,\\n          vars.avgLiqThreshold\\n        )\\n      });\\n  }\\n\\n  /**\\n   * @dev Calculates the health factor of the user\\n   * @param totalCollateralInETH The total collaterals in ETH\\n   * @param totalDebtInETH The total debts in ETH\\n   * @param avgLiqThreshold The avg liquidation threshold\\n   * @return The health factor\\n   **/\\n  function calculateHealthFactor(\\n    uint256 totalCollateralInETH,\\n    uint256 totalDebtInETH,\\n    uint256 avgLiqThreshold\\n  ) public pure returns (uint256) {\\n    if (totalDebtInETH == 0) return type(uint256).max;\\n    return (totalCollateralInETH.percentMul(avgLiqThreshold)).wadDiv(totalDebtInETH);\\n  }\\n\\n  /**\\n   * @dev Calculates the user liquidity in NFT reserves.\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the NFT reserves\\n   * @param params other params\\n   * @return state variables\\n   **/\\n  function calculateUserAssetValues(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    address asset,\\n    CalUserStateParam memory params\\n  ) public view returns (uint256, uint256, uint256) {\\n    uint256 liquidityInEth;\\n    uint256 debtInEth;\\n    uint256 collateralInEth;\\n    uint256 id = reserves[asset].id;\\n    if (id != 0) {\\n      Reserve.ReserveData storage reserve = reserves[asset];\\n      liquidityInEth = reserve.getUserLiquidityETH(asset, params.user, params.oracle);\\n      debtInEth = reserve.getUserDebtETH(asset, params.user, params.oracle);\\n      if (params.userConfig.isUsingAsCollateral(id)) {\\n        collateralInEth = liquidityInEth;\\n      }\\n    } else if (nftReserves[asset].id != 0) {\\n      NFTReserve.ReserveData storage nftReserve = nftReserves[asset];\\n      liquidityInEth = collateralInEth = nftReserve.getUserLiquidityETH(\\n        asset,\\n        params.user,\\n        params.oracle\\n      );\\n    }\\n    return (liquidityInEth, debtInEth, collateralInEth);\\n  }\\n\\n  /**\\n   * @dev Calculates the user total collateral across all the reserves.\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param params other params\\n   * @return state variables\\n   **/\\n  function calculateUserValues(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    CalUserStateParam memory params\\n  ) public view returns (uint256) {\\n    // total liquidity here only refer to collaterals\\n    address underlyingAddress;\\n    uint256 totalLiquidityInEth;\\n    uint256 liquidityInEth;\\n    uint256 i;\\n    // Calculate for borrowable reserves\\n    if (params.userConfig.isUsingAsCollateralAny()) {\\n      for (i = 1; i < params.reserveCount + 1; i++) {\\n        bool isCollateral = params.userConfig.isUsingAsCollateral(i);\\n        if (!isCollateral) {\\n          continue;\\n        }\\n        underlyingAddress = reserveList[i];\\n        if (underlyingAddress == address(0)) {\\n          continue;\\n        }\\n        Reserve.ReserveData storage currentReserve = reserves[underlyingAddress];\\n        if (isCollateral) {\\n          liquidityInEth = currentReserve.getUserLiquidityETH(\\n            underlyingAddress,\\n            params.user,\\n            params.oracle\\n          );\\n          totalLiquidityInEth += liquidityInEth;\\n        }\\n      }\\n    }\\n    // Calculate for nft reserves\\n    if (params.userNFTConfig.isUsingAsCollateralAny()) {\\n      for (i = 1; i < params.nftReserveCount + 1; i++) {\\n        underlyingAddress = nftReserveList[i];\\n        if (underlyingAddress == address(0)) {\\n          continue;\\n        }\\n        NFTReserve.ReserveData storage currentReserve = nftReserves[underlyingAddress];\\n        liquidityInEth = currentReserve.getUserLiquidityETH(\\n          underlyingAddress,\\n          params.user,\\n          params.oracle\\n        );\\n        totalLiquidityInEth += liquidityInEth;\\n      }\\n    }\\n    return totalLiquidityInEth;\\n  }\\n}\\n\",\"keccak256\":\"0xf0b728a6af4fe53bea2ed1f50e958e615ce29e108110c93bcc54b88760aa848d\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/core/Validator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {Reserve} from \\\"../types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../types/NFTReserve.sol\\\";\\nimport {UserConfiguration} from \\\"../types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../types/UserNftConfiguration.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"../types/ReserveConfiguration.sol\\\";\\nimport {UserVariableCalculator} from \\\"./UserVariableCalculator.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Validator library\\n * @author Taker\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary Validator {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  string public constant NAME = \\\"V\\\";\\n  uint256 public constant HEALTH_FACTOR_THRESHOLD = 1e18;\\n\\n  /**\\n   * @dev Performs basic checks\\n   * @param configuration The reserve configuration\\n   * @param amount The amount to be deposited\\n   * @param checkFreeze Whether to check freeze\\n   */\\n  function performBaseCheck(\\n    ReserveConfiguration configuration,\\n    uint256 amount,\\n    bool checkFreeze\\n  ) external pure {\\n    _performBaseCheck(configuration, amount, checkFreeze);\\n  }\\n\\n  /**\\n   * @dev Validates a drop reserve action\\n   * @param reservesList List of active reserves\\n   * @param nftReservesList List of active nft reserves\\n   * @param reserve The reserve object\\n   * @param nftReserve The nft reserve object\\n   * @param asset The underlying asset of the reserve\\n   * @return whether the asset is NFT\\n   **/\\n  function validateDropReserve(\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint256 => address) storage nftReservesList,\\n    Reserve.ReserveData storage reserve,\\n    NFTReserve.ReserveData storage nftReserve,\\n    address asset\\n  ) internal view returns (bool) {\\n    require(asset != address(0), Errors.genErrMsg(NAME, Errors.ZERO_ADDRESS));\\n    // the asset is corresponding to reserve or nft reserve\\n    require(\\n      reserve.id != 0 ||\\n        reservesList[0] == asset ||\\n        nftReserve.id != 0 ||\\n        nftReservesList[0] == asset,\\n      Errors.NONEXIST_RESERVE\\n    );\\n    if (reserve.tTokenAddress != address(0)) {\\n      require(\\n        IERC20(reserve.debtTokenAddress).totalSupply() == 0,\\n        Errors.genErrMsg(NAME, Errors.NON_ZERO_DEBT_TOKEN_SUPPLY)\\n      );\\n      require(\\n        IERC20(reserve.tTokenAddress).totalSupply() == 0,\\n        Errors.genErrMsg(NAME, Errors.NON_ZERO_TTOKEN_SUPPLY)\\n      );\\n      return false;\\n    } else {\\n      require(\\n        IERC20(nftReserve.tNFTAddress).totalSupply() == 0,\\n        Errors.genErrMsg(NAME, Errors.NON_ZERO_TTOKEN_SUPPLY)\\n      );\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates a borrow action\\n   * @param asset The address of the asset to borrow\\n   * @param reserve The reserve which the user aims to borrow\\n   * @param amount The amount to be borrowed\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param params other params\\n   */\\n  function validateBorrow(\\n    address asset,\\n    Reserve.ReserveData storage reserve,\\n    uint256 amount,\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    UserVariableCalculator.CalUserStateParam memory params\\n  ) external view {\\n    ReserveConfiguration configuration = reserve.configuration;\\n    _performBaseCheck(configuration, amount, true);\\n\\n    uint256 borrowCap = reserve.configuration.getBorrowCap();\\n    uint256 totalDebt = IERC20(asset).totalSupply();\\n    require(\\n      totalDebt + amount <= borrowCap * 10 ** reserve.configuration.getDecimals(),\\n      Errors.genErrMsg(NAME, Errors.BORROW_CAP_EXCEEDED)\\n    );\\n\\n    UserVariableCalculator.StateVar memory vars = UserVariableCalculator\\n      .calculateUserStateVariables(reserves, nftReserves, reserveList, nftReserveList, params);\\n    require(vars.totalCollateralInEth > 0, Errors.genErrMsg(NAME, Errors.ZERO_COLLATERAL_BALANCE));\\n\\n    require(\\n      vars.hf >= HEALTH_FACTOR_THRESHOLD,\\n      Errors.genErrMsg(NAME, Errors.HEALTH_FACTOR_UNDER_THRESHOLD)\\n    );\\n    uint256 amountInEth = IPriceOracleGetter(params.oracle).getReserveAssetPrice(asset) * amount;\\n    unchecked {\\n      amountInEth /= 10 ** reserve.configuration.getDecimals();\\n    }\\n    require(\\n      vars.totalDebtInEth + amountInEth <= vars.totalCollateralInEth.percentMul(vars.ltv),\\n      Errors.genErrMsg(NAME, Errors.COLLATERAL_NOT_ENOUGH_FOR_BORROW)\\n    );\\n  }\\n\\n  /**\\n   * @dev Validates a repay action\\n   * @param reserve The reserve state from which the user is repaying\\n   * @param amount The repay amount\\n   * @param debt The `to` address's debt\\n   */\\n  function validateRepay(\\n    Reserve.ReserveData storage reserve,\\n    uint256 amount,\\n    uint256 debt\\n  ) external view {\\n    _performBaseCheck(reserve.configuration, amount, false);\\n    require(debt != 0, Errors.genErrMsg(NAME, Errors.NO_DEBT_TO_REPAY));\\n  }\\n\\n  /**\\n   * @dev Validates a liquidate action\\n   * @param nft The nft to be liquidated\\n   * @param configuration The debt reserves configuration\\n   * @param nftReserves The NFT reserves\\n   * @param stateVar The user state variables\\n   **/\\n  function validateLiquidate(\\n    address nft,\\n    ReserveConfiguration configuration,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    UserVariableCalculator.StateVar memory stateVar\\n  ) internal view {\\n    _performBaseCheck(configuration, 1, false);\\n    require(\\n      stateVar.hf < HEALTH_FACTOR_THRESHOLD,\\n      Errors.genErrMsg(NAME, Errors.HEALTH_FACTOR_ABOVE_THRESHOLD)\\n    );\\n\\n    NFTReserve.ReserveData storage nftReserve = nftReserves[nft];\\n    ReserveConfiguration config = nftReserve.configuration;\\n    _performBaseCheck(config, 1, false);\\n  }\\n\\n  /**\\n   * @notice Validates set using as collateral action\\n   * @param configuration The configuration of the reserve\\n   * @param userBalance The balance of the user under this reserve\\n   * @param usingAsCollateral Whether to set asset as collateral\\n   */\\n  function validateSetUsingAsCollateral(\\n    ReserveConfiguration configuration,\\n    uint256 userBalance,\\n    bool usingAsCollateral\\n  ) internal pure {\\n    require(userBalance != 0, Errors.genErrMsg(NAME, Errors.ZERO_BALANCE));\\n    require(configuration.getActive(), Errors.genErrMsg(NAME, Errors.INACTIVE_RESERVE));\\n    if (usingAsCollateral) {\\n      require(\\n        configuration.getCollaterizable(),\\n        Errors.genErrMsg(NAME, Errors.ASSET_NOT_COLLATERIZABLE)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates user's health\\n   * @param reserves Data of all the normal reserves\\n   * @param nftReserves Data of all the nft reserves\\n   * @param reserveList The address of the corresponding tToken of all the normal reserves\\n   * @param nftReserveList The address of the corresponding tToken of all the nft reserves\\n   * @param params other params\\n   */\\n  function validateUserHealth(\\n    mapping(address => Reserve.ReserveData) storage reserves,\\n    mapping(address => NFTReserve.ReserveData) storage nftReserves,\\n    mapping(uint256 => address) storage reserveList,\\n    mapping(uint256 => address) storage nftReserveList,\\n    UserVariableCalculator.CalUserStateParam memory params\\n  ) external view {\\n    UserVariableCalculator.StateVar memory vars = UserVariableCalculator\\n      .calculateUserStateVariables(reserves, nftReserves, reserveList, nftReserveList, params);\\n\\n    require(\\n      vars.hf >= HEALTH_FACTOR_THRESHOLD,\\n      Errors.genErrMsg(NAME, Errors.HEALTH_FACTOR_UNDER_THRESHOLD)\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs basic checks\\n   * @param configuration The reserve configuration\\n   * @param amount The amount to be deposited\\n   * @param checkFreeze Whether to check freeze\\n   */\\n  function _performBaseCheck(\\n    ReserveConfiguration configuration,\\n    uint256 amount,\\n    bool checkFreeze\\n  ) private pure {\\n    require(amount != 0, Errors.genErrMsg(NAME, Errors.INVALID_AMOUNT));\\n\\n    (bool isActive, bool isFrozen, bool isPause) = configuration.getFlags();\\n    require(isActive, Errors.genErrMsg(NAME, Errors.INACTIVE_RESERVE));\\n    require(!isPause, Errors.genErrMsg(NAME, Errors.PAUSED_RESERVE));\\n    if (checkFreeze) {\\n      require(!isFrozen, Errors.genErrMsg(NAME, Errors.FROZEN_RESERVE));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x023b998dc9ba43ae9133adba4debf0e5a8a26c205399a3bf78b4f6d14dca4aea\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/math/InterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title InterestCalculator library\\n * @author Taker, inspired by AAVE MathUtil library\\n * @notice Used to calculate linear and compound interests\\n */\\nlibrary InterestCalculator {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Calculate the normalized asset gain under linear interest\\n   * @param rate The interest rate, in ray\\n   * @param duration Duration for interest calculation, in timestamp uint\\n   * @return The scale factor (asset * scale factor = asset + accured interest)\\n   **/\\n  function getNormalizedScaleWithLinearInterest(uint256 rate, uint256 duration)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result = rate * duration;\\n    unchecked {\\n      result = result / SECONDS_PER_YEAR;\\n    }\\n\\n    return WadRayMath.RAY + result;\\n  }\\n\\n  /**\\n   * @dev Calculate the normalized asset gain under compound interest\\n   * Used binomial approximation to reduce gas fee\\n   * @param rate The interest rate, in ray\\n   * @param duration Duration for interest calculation, in timestamp uint\\n   * @return The scale factor (asset * scale factor = asset + accured interest)\\n   **/\\n  function getNormalizedScaleWithCompoundInterest(uint256 rate, uint256 duration)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (duration == 0) {\\n      return WadRayMath.RAY;\\n    }\\n\\n    uint256 expMinusOne;\\n    uint256 expMinusTwo;\\n    uint256 basePowerTwo;\\n    uint256 basePowerThree;\\n    unchecked {\\n      expMinusOne = duration - 1;\\n      expMinusTwo = duration > 2 ? duration - 2 : 0;\\n\\n      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n    }\\n\\n    uint256 secondTerm = duration * expMinusOne * basePowerTwo;\\n    unchecked {\\n      secondTerm /= 2;\\n    }\\n    uint256 thirdTerm = duration * expMinusOne * expMinusTwo * basePowerThree;\\n    unchecked {\\n      thirdTerm /= 6;\\n    }\\n\\n    return WadRayMath.RAY + (rate * duration) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n  }\\n}\\n\",\"keccak256\":\"0x5b05f25ea3b4b2ff0a74ae379dd97c6c187321f26c86f340deff1418016967e0\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title PercentageMath library\\n * @author Taker, inspired by the AAVE WadRayMath library implementation\\n * @notice Provides functions to perform percentage calculations\\n * @dev The calculation has 2 decimals of precision (100.00) and is rounded up\\n **/\\n\\nlibrary PercentageMath {\\n  //percentage with 2 decimals\\n  uint256 public constant PERCENT = 1e4;\\n  uint256 public constant HALF_PERCENT = PERCENT / 2;\\n\\n  /**\\n   * @dev Returns value after a percentage multiplication\\n   * @param value Multiplier\\n   * @param percentage The percentage\\n   * @return The value multiplied percentage\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENT;\\n  }\\n\\n  /**\\n   * @dev Returns value after a percentage division\\n   * @param value Divisor\\n   * @param percentage The percentage\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    uint256 halfPercentage = percentage / 2;\\n    return (value * PERCENT + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xcca49b20b58f2cb28f11fd638022cac4390b24dc777241c57c68bd7e08f927bf\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\n/**\\n * @title WadRayMath library\\n * @author Taker, inspired by the AAVE WadRayMath library implementation\\n * @notice Provides functions to perform calculations with Wad(18 digits precision) and Ray(27 digits of precision) units\\n **/\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a * b + HALF_WAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    return (a * b + HALF_RAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x236390101100767e4229b7f9b1370a9a74da7a534f8e57d67ced7f76e7042267\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/types/NFTReserve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ITERC721} from \\\"../../interfaces/tokens/ITERC721.sol\\\";\\nimport {ITERC1155} from \\\"../../interfaces/tokens/ITERC1155.sol\\\";\\n\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\n\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"./ReserveConfiguration.sol\\\";\\nimport {Errors} from \\\"../Errors.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title NFTReserve library\\n * @author Taker\\n * @notice Defines reserve data and implements the logic to update the reserves state\\n */\\nlibrary NFTReserve {\\n  using WadRayMath for uint256;\\n\\n  string public constant NAME = \\\"NR\\\";\\n\\n  struct ReserveData {\\n    ReserveConfiguration configuration;\\n    //address for tNFT\\n    address tNFTAddress;\\n    //the id of the nft reserve.\\n    uint8 id;\\n  }\\n\\n  /**\\n   * @dev Initializes a nft reserve\\n   * @param reserve The nft reserve object\\n   * @param configuration The configuration including ltv and threshold\\n   * @param tNFTAddress The address of corresponding tNFT\\n   **/\\n  function init(\\n    ReserveData storage reserve,\\n    ReserveConfiguration configuration,\\n    address tNFTAddress\\n  ) external {\\n    require(\\n      reserve.tNFTAddress == address(0),\\n      Errors.genErrMsg(NAME, Errors.RESERVE_ALREADY_INITIALIZED)\\n    );\\n\\n    reserve.configuration = configuration;\\n    reserve.tNFTAddress = tNFTAddress;\\n  }\\n\\n  /**\\n   * @dev Returns the users total liquidity in the nft reserve in ETH\\n   * @param nft The nft reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total liquidity in ETH\\n   **/\\n  function getLiquidityETH(\\n    ReserveData storage nft,\\n    address underlying,\\n    address oracle\\n  ) internal view returns (uint256) {\\n    ReserveConfiguration configuration = nft.configuration;\\n    uint256 amountInEth = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying) *\\n      IERC20(nft.tNFTAddress).totalSupply();\\n    unchecked {\\n      amountInEth /= 10 ** configuration.getDecimals();\\n    }\\n    return amountInEth;\\n  }\\n\\n  /**\\n   * @dev Returns the users total liquidity in the nft reserve in ETH\\n   * @param nft The nft reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param user The user address\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total liquidity in ETH\\n   **/\\n  function getUserLiquidityETH(\\n    ReserveData storage nft,\\n    address underlying,\\n    address user,\\n    address oracle\\n  ) internal view returns (uint256) {\\n    ReserveConfiguration configuration = nft.configuration;\\n    ReserveConfigurator.TokenType tokenType = configuration.getTokenType();\\n    uint256 amountInEth = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying);\\n    if (tokenType == ReserveConfigurator.TokenType.ERC1155) {\\n      amountInEth *= IERC1155(nft.tNFTAddress).balanceOf(user, 0);\\n    } else {\\n      amountInEth *= IERC721(nft.tNFTAddress).balanceOf(user);\\n    }\\n    unchecked {\\n      amountInEth /= 10 ** configuration.getDecimals();\\n    }\\n    return amountInEth;\\n  }\\n}\\n\",\"keccak256\":\"0x80b723fec973444ac54cf0a36421e8e7c72901ee36757b79d816da4ad69fcb8f\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/types/Reserve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\nimport {ITToken} from \\\"../../interfaces/tokens/ITToken.sol\\\";\\nimport {IDebtToken} from \\\"../../interfaces/tokens/IDebtToken.sol\\\";\\nimport {IInterestRateCalculator} from \\\"../../interfaces/IInterestRateCalculator.sol\\\";\\n\\nimport {InterestCalculator} from \\\"../math/InterestCalculator.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\n\\nimport {ReserveConfiguration} from \\\"./ReserveConfiguration.sol\\\";\\nimport {Errors} from \\\"../Errors.sol\\\";\\n\\n/**\\n * @title Reserve library\\n * @author Taker\\n * @notice Defines reserve data and implements the logic to update the reserves state\\n */\\nlibrary Reserve {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n\\n  string public constant NAME = \\\"R\\\";\\n  struct ReserveData {\\n    ReserveConfiguration configuration;\\n    //the liquidity index in ray. Liquidity = corresponding tToken balance * liquidity index\\n    uint128 liquidityIndex;\\n    //the debt index in ray. Debt = corresponding debtToken balance * debt index\\n    uint128 debtIndex;\\n    //interest rate for liquidity providers in ray\\n    uint128 depositRate;\\n    //interest rate for borrow\\n    uint128 borrowRate;\\n    //last timestamp when reserve state was updated\\n    uint40 lastUpdateTimestamp;\\n    //corresponding tToken address\\n    address tTokenAddress;\\n    // corresponding debt token address\\n    address debtTokenAddress;\\n    //address of the interest rate calculator\\n    address interestRateCalculatorAddress;\\n    //the address of the treasury\\n    address treasury;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  // See ILendingPool for descriptions\\n  event ReserveDataUpdated(\\n    address indexed asset,\\n    uint256 depositRate,\\n    uint256 borrowRate,\\n    uint256 liquidityIndex,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Initializes a reserve\\n   * @param reserve The reserve\\n   * @param tTokenAddress The address of the overlying tToken contract\\n   * @param debtTokenAddress The address of the overlying debtToken contract\\n   * @param interestRateCalculatorAddress The address of the interest rate calculator contract\\n   **/\\n  function init(\\n    ReserveData storage reserve,\\n    ReserveConfiguration configuration,\\n    address tTokenAddress,\\n    address debtTokenAddress,\\n    address interestRateCalculatorAddress\\n  ) external {\\n    require(\\n      reserve.tTokenAddress == address(0),\\n      Errors.genErrMsg(NAME, Errors.RESERVE_ALREADY_INITIALIZED)\\n    );\\n\\n    reserve.configuration = configuration;\\n    reserve.liquidityIndex = uint128(WadRayMath.RAY);\\n    reserve.debtIndex = uint128(WadRayMath.RAY);\\n    reserve.tTokenAddress = tTokenAddress;\\n    reserve.debtTokenAddress = debtTokenAddress;\\n    reserve.interestRateCalculatorAddress = interestRateCalculatorAddress;\\n  }\\n\\n  /**\\n   * @dev Returns the current scale factor of liquidity of the reserve\\n   *      total liquidity = factor * balance of tToken\\n   * @param reserve The reserve\\n   * @return the normalized scale factor of liquidity. expressed in ray\\n   **/\\n  function getNormalizedLiquidityScale(\\n    Reserve.ReserveData storage reserve\\n  ) internal view returns (uint256) {\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n    uint256 currTimestamp = block.timestamp;\\n    //solium-disable-next-line\\n    if (lastUpdatedTimestamp == uint40(currTimestamp)) {\\n      // Return the index if the state has been updated\\n      return reserve.liquidityIndex;\\n    }\\n    uint256 incomeScale = InterestCalculator\\n      .getNormalizedScaleWithLinearInterest(\\n        reserve.depositRate,\\n        currTimestamp - lastUpdatedTimestamp\\n      )\\n      .rayMul(reserve.liquidityIndex);\\n\\n    return incomeScale;\\n  }\\n\\n  /**\\n   * @dev Returns the current scale factor of debt of the reserve\\n   *      total debt = factor * balance of debt token\\n   * @param reserve The reserve\\n   * @return the normalized scale factor of debt. expressed in ray\\n   **/\\n  function getNormalizedDebtScale(\\n    Reserve.ReserveData storage reserve\\n  ) internal view returns (uint256) {\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n    uint256 currTimestamp = block.timestamp;\\n    //solium-disable-next-line\\n    if (lastUpdatedTimestamp == uint40(currTimestamp)) {\\n      return reserve.debtIndex;\\n    }\\n\\n    uint256 cumulated = InterestCalculator\\n      .getNormalizedScaleWithCompoundInterest(\\n        reserve.borrowRate,\\n        currTimestamp - lastUpdatedTimestamp\\n      )\\n      .rayMul(reserve.debtIndex);\\n\\n    return cumulated;\\n  }\\n\\n  /**\\n   * @dev Updates the liquidity index and the borrow index. And mint share to treasury\\n   * @param reserve the reserve object\\n   * @return current liquidity index\\n   **/\\n  function updateState(ReserveData storage reserve) internal returns (uint256) {\\n    uint256 scaledDebt = IDebtToken(reserve.debtTokenAddress).compoundedTotalSupply();\\n\\n    (uint256 currLiqIdx, uint256 prevDebtIdx, uint256 currDebtIdx) = _updateIndexes(\\n      reserve,\\n      scaledDebt\\n    );\\n\\n    _mintToTreasury(reserve, scaledDebt, prevDebtIdx, currDebtIdx, currLiqIdx);\\n\\n    return currLiqIdx;\\n  }\\n\\n  /**\\n   * @dev Updates the reserve current borrow rate and the current liquidity rate\\n   * @param reserve The reserve data\\n   * @param asset The address of the reserve underlying ERC20\\n   * @param tTokenAddress The address of the reserve tToken\\n   **/\\n  function updateInterestRates(\\n    ReserveData storage reserve,\\n    address asset,\\n    address tTokenAddress\\n  ) internal {\\n    uint256 liquidityIndex = reserve.liquidityIndex;\\n    uint256 debtIndex = reserve.debtIndex;\\n    uint256 totalDebt = IDebtToken(reserve.debtTokenAddress).totalSupply() * reserve.debtIndex;\\n    uint256 totalLiquitity = ITToken(tTokenAddress).totalSupply() * reserve.liquidityIndex;\\n\\n    (uint256 newDepositRate, uint256 newBorrowRate) = IInterestRateCalculator(\\n      reserve.interestRateCalculatorAddress\\n    ).calculateInterestRates(totalLiquitity, totalDebt, reserve.configuration.getReserveFactor());\\n    reserve.depositRate = newDepositRate.toUint128();\\n    reserve.borrowRate = newBorrowRate.toUint128();\\n\\n    emit ReserveDataUpdated(asset, newDepositRate, newBorrowRate, liquidityIndex, debtIndex);\\n  }\\n\\n  /**\\n   * @dev Returns the total liquidity in the reserve in ETH\\n   * @param reserve The reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total liquidity in ETH\\n   **/\\n  function getLiquidityETH(\\n    ReserveData storage reserve,\\n    address underlying,\\n    address oracle\\n  ) internal view returns (uint256 amountInEth) {\\n    uint256 price = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying);\\n    amountInEth = price * ITToken(reserve.tTokenAddress).compoundedTotalSupply();\\n    unchecked {\\n      amountInEth /= 10 ** reserve.configuration.getDecimals();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total debt from the reserve in ETH\\n   * @param reserve The reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total debt in ETH\\n   **/\\n  function getDebtETH(\\n    ReserveData storage reserve,\\n    address underlying,\\n    address oracle\\n  ) internal view returns (uint256 amountInEth) {\\n    uint256 price = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying);\\n    amountInEth = price * IDebtToken(reserve.debtTokenAddress).compoundedTotalSupply();\\n    unchecked {\\n      amountInEth /= 10 ** reserve.configuration.getDecimals();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the users total liquidity in the reserve in ETH\\n   * @param reserve The reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param user The user address\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total liquidity in ETH\\n   **/\\n  function getUserLiquidityETH(\\n    ReserveData storage reserve,\\n    address underlying,\\n    address user,\\n    address oracle\\n  ) internal view returns (uint256 amountInEth) {\\n    uint256 price = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying);\\n    amountInEth = price * ITToken(reserve.tTokenAddress).compoundedBalanceOf(user);\\n    unchecked {\\n      amountInEth /= 10 ** reserve.configuration.getDecimals();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the users total debt from the reserve in ETH\\n   * @param reserve The reserve object\\n   * @param underlying The underlying asset address of the reserve\\n   * @param user The user address\\n   * @param oracle The address of the price oracle\\n   * @return amountInEth The total debt in ETH\\n   **/\\n  function getUserDebtETH(\\n    ReserveData storage reserve,\\n    address underlying,\\n    address user,\\n    address oracle\\n  ) internal view returns (uint256 amountInEth) {\\n    uint256 price = IPriceOracleGetter(oracle).getReserveAssetPrice(underlying);\\n    amountInEth = price * IDebtToken(reserve.debtTokenAddress).compoundedBalanceOf(user);\\n    unchecked {\\n      amountInEth /= 10 ** reserve.configuration.getDecimals();\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the reserve indexes and the timestamp of the update\\n   * @param reserve The reserve reserve to be updated\\n   * @param scaledDebt The scaled debt\\n   **/\\n  function _updateIndexes(\\n    ReserveData storage reserve,\\n    uint256 scaledDebt\\n  ) internal returns (uint256 currLiqIdx, uint256 prevDebtIdx, uint256 currDebtIdx) {\\n    prevDebtIdx = reserve.debtIndex;\\n    uint256 prevLiqIdx = reserve.liquidityIndex;\\n    uint40 duration = uint40(block.timestamp - uint256(reserve.lastUpdateTimestamp));\\n\\n    if (reserve.depositRate > 0) {\\n      uint256 cumulatedDepInterestScale = InterestCalculator.getNormalizedScaleWithLinearInterest(\\n        reserve.depositRate,\\n        duration\\n      );\\n      currLiqIdx = prevLiqIdx.rayMul(cumulatedDepInterestScale);\\n      reserve.liquidityIndex = currLiqIdx.toUint128();\\n\\n      // we need to ensure that there is actual debt before accumulating\\n      if (scaledDebt != 0) {\\n        uint256 cumulatedBorrowInterestScale = InterestCalculator\\n          .getNormalizedScaleWithCompoundInterest(reserve.borrowRate, duration);\\n        currDebtIdx = prevDebtIdx.rayMul(cumulatedBorrowInterestScale);\\n        reserve.debtIndex = uint128(currDebtIdx);\\n      }\\n    }\\n\\n    //solium-disable-next-line\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n  }\\n\\n  /**\\n   * @dev Mints interest to the treasury according to the reserveFactor\\n   * @param reserve The reserve data\\n   * @param scaledDebt The scaled debt\\n   * @param prevDebtIdx The debt index before update\\n   * @param currDebtIdx The debt index after update\\n   * @param currLiqIdx The new liquidity index\\n   **/\\n  function _mintToTreasury(\\n    ReserveData storage reserve,\\n    uint256 scaledDebt,\\n    uint256 prevDebtIdx,\\n    uint256 currDebtIdx,\\n    uint256 currLiqIdx\\n  ) internal {\\n    uint256 reserveFactor = reserve.configuration.getReserveFactor();\\n    if (reserveFactor == 0) {\\n      return;\\n    }\\n\\n    uint256 prevDebt = scaledDebt.rayMul(prevDebtIdx);\\n    uint256 currDebt = scaledDebt.rayMul(currDebtIdx);\\n    uint256 accruedDebt = currDebt - prevDebt;\\n\\n    uint256 treasuryIncome = accruedDebt.percentMul(reserveFactor);\\n\\n    if (treasuryIncome != 0) {\\n      ITToken(reserve.tTokenAddress).mint(reserve.treasury, treasuryIncome, currLiqIdx);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe7e83a98ba431a1cee7ee063b08c22be6ec2947ead490c21977bf1bcbb30400\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/types/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\n\\n/**\\n * @notice The configuration is shared for NFT reserve and normal reserve.\\n * bit 0-15: LTV\\n * bit 16-31: Liq. threshold\\n * bit 32-39: Decimals\\n * bit 40: Reserve is active\\n * bit 41: reserve is frozen\\n * bit 42: reserve is paused\\n * bit 43: reserved\\n * bit 44-59: reserve factor\\n * bit 60-61: token type: 0->ERC20 1->ERC721 2->ERC1155 (0 for normal reserves)\\n * bit 62-63: reserved\\n */\\ntype ReserveConfiguration is uint256;\\nusing ReserveConfigurator for ReserveConfiguration global;\\n\\n/**\\n * @title ReserveConfigurator library\\n * @author Taker\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfigurator {\\n  string internal constant COMPONENT_NAME = \\\"RC\\\";\\n\\n  uint256 internal constant LTV_MASK =                     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; //prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; //prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF; //prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant PAUSE_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant COLLATERIZABLE_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant TOKEN_TYPE_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant DEPOSIT_CAP_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFF; //prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFF; //prettier-ignore\\n\\n  // bit shiftings to get the start poistion for each variable\\n  uint256 internal constant LIQUIDATION_THRESHOLD_SHIFT = 16;\\n  uint256 internal constant DECIMALS_SHIFT = 32;\\n  uint256 internal constant IS_ACTIVE_SHIFT = 40;\\n  uint256 internal constant IS_FROZEN_SHIFT = 41;\\n  uint256 internal constant IS_PAUSE_SHIFT = 42;\\n  uint256 internal constant IS_COLLATERIZABLE_SHIFT = 43;\\n  uint256 internal constant RESERVE_FACTOR_SHIFT = 60;\\n  uint256 internal constant TOKEN_TYPE_SHIFT = 62;\\n  uint256 internal constant DEPOSIT_CAP_SHIFT = 64;\\n  uint256 internal constant BORROW_CAP_SHIFT = 100;\\n\\n  uint256 internal constant MAX_LTV = 8000; // 65535\\n  uint256 internal constant MAX_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_DECIMALS = 255;\\n  uint256 internal constant MAX_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_DEPOSIT_CAP = 68719476735;\\n  uint256 internal constant MAX_BORROW_CAP = 68719476735;\\n\\n  uint16 internal constant MAX_NUMBER_RESERVES = 128;\\n  uint16 internal constant MAX_NUMBER_NFT_RESERVES = 256;\\n\\n  enum TokenType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n  }\\n\\n  /**\\n   * @dev Returns configuration after setting new Loan to Value\\n   * @param configuration The reserve configuration\\n   * @param ltv The new ltv\\n   * @return The new configuration\\n   **/\\n  function setLtv(\\n    ReserveConfiguration configuration,\\n    uint256 ltv\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(ltv <= MAX_LTV, Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_LTV));\\n    return ReserveConfiguration.wrap((ReserveConfiguration.unwrap(configuration) & LTV_MASK) | ltv);\\n  }\\n\\n  /**\\n   * @dev Gets the Loan to Value of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(ReserveConfiguration configuration) internal pure returns (uint256) {\\n    return ReserveConfiguration.unwrap(configuration) & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @dev Returns configuration after setting new liquidation threshold\\n   * @param configuration The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   * @return The new configuration\\n   **/\\n  function setLiquidationThreshold(\\n    ReserveConfiguration configuration,\\n    uint256 threshold\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(\\n      threshold <= MAX_LIQUIDATION_THRESHOLD,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_LIQ_THRESHOLD)\\n    );\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & LIQUIDATION_THRESHOLD_MASK) |\\n          (threshold << LIQUIDATION_THRESHOLD_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation threshold of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(\\n    ReserveConfiguration configuration\\n  ) internal pure returns (uint256) {\\n    return\\n      (ReserveConfiguration.unwrap(configuration) & ~LIQUIDATION_THRESHOLD_MASK) >>\\n      LIQUIDATION_THRESHOLD_SHIFT;\\n  }\\n\\n  /**\\n   * @dev Returns configuration after setting new decimals\\n   * @param configuration The reserve configuration\\n   * @param decimals The new decimals\\n   * @return The new configuration\\n   **/\\n  function setDecimals(\\n    ReserveConfiguration configuration,\\n    uint256 decimals\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(decimals <= MAX_DECIMALS, Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_DECIMALS));\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & DECIMALS_MASK) | (decimals << DECIMALS_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the decimals of the underlying asset of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(ReserveConfiguration configuration) internal pure returns (uint256) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~DECIMALS_MASK) >> DECIMALS_SHIFT;\\n  }\\n\\n  /**\\n   * @dev Returns configuration after setting active state\\n   * @param configuration The reserve configuration\\n   * @param active The active state\\n   * @return The new configuration\\n   **/\\n  function setActive(\\n    ReserveConfiguration configuration,\\n    bool active\\n  ) internal pure returns (ReserveConfiguration) {\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & ACTIVE_MASK) |\\n          (uint256(active ? 1 : 0) << IS_ACTIVE_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the active state of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(ReserveConfiguration configuration) internal pure returns (bool) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Returns configuration after setting frozen state\\n   * @param configuration The reserve configuration\\n   * @param frozen The frozen state\\n   * @return The new configuration\\n   **/\\n  function setFrozen(\\n    ReserveConfiguration configuration,\\n    bool frozen\\n  ) internal pure returns (ReserveConfiguration) {\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & FROZEN_MASK) |\\n          (uint256(frozen ? 1 : 0) << IS_FROZEN_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the frozen state of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(ReserveConfiguration configuration) internal pure returns (bool) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Returns new configuration after setting pause\\n   * @param configuration The reserve configuration\\n   * @param pause The pause state\\n   * @return The new configuration\\n   **/\\n  function setPause(\\n    ReserveConfiguration configuration,\\n    bool pause\\n  ) internal pure returns (ReserveConfiguration) {\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & PAUSE_MASK) |\\n          (uint256(pause ? 1 : 0) << IS_PAUSE_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the pause state of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The pause state\\n   **/\\n  function getPause(ReserveConfiguration configuration) internal pure returns (bool) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~PAUSE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Returns new configuration after setting collaterizable\\n   * @param configuration The reserve configuration\\n   * @param collaterizable The collaterizable state\\n   * @return The new configuration\\n   **/\\n  function setCollaterizable(\\n    ReserveConfiguration configuration,\\n    bool collaterizable\\n  ) internal pure returns (ReserveConfiguration) {\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & COLLATERIZABLE_MASK) |\\n          (uint256(collaterizable ? 1 : 0) << IS_COLLATERIZABLE_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the collaterizable state of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The collaterizable state\\n   **/\\n  function getCollaterizable(ReserveConfiguration configuration) internal pure returns (bool) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~COLLATERIZABLE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Returns new configuration after set reserve factor\\n   * @param configuration The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   * @return The new configuration\\n   **/\\n  function setReserveFactor(\\n    ReserveConfiguration configuration,\\n    uint256 reserveFactor\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(\\n      reserveFactor <= MAX_RESERVE_FACTOR,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_RESERVE_FACTOR)\\n    );\\n\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & RESERVE_FACTOR_MASK) |\\n          (reserveFactor << RESERVE_FACTOR_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the reserve factor of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(ReserveConfiguration configuration) internal pure returns (uint256) {\\n    return\\n      (ReserveConfiguration.unwrap(configuration) & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_SHIFT;\\n  }\\n\\n  /**\\n   * @dev Returns new configuration after set token type\\n   * @param configuration The reserve configuration\\n   * @param tokenType The type of the token\\n   * @return The new configuration\\n   **/\\n  function setTokenType(\\n    ReserveConfiguration configuration,\\n    TokenType tokenType\\n  ) internal pure returns (ReserveConfiguration) {\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & TOKEN_TYPE_MASK) |\\n          (uint256(tokenType) << TOKEN_TYPE_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @dev Gets the token type of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The token type\\n   **/\\n  function getTokenType(ReserveConfiguration configuration) internal pure returns (TokenType) {\\n    return\\n      TokenType(\\n        (ReserveConfiguration.unwrap(configuration) & ~TOKEN_TYPE_MASK) >> TOKEN_TYPE_SHIFT\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns new configuration after set the deposit cap\\n   * @param configuration The reserve configuration\\n   * @param depositCap The deposit cap\\n   **/\\n  function setDepositCap(\\n    ReserveConfiguration configuration,\\n    uint256 depositCap\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(depositCap <= MAX_DEPOSIT_CAP, Errors.INVALID_DEPOSIT_CAP);\\n\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & DEPOSIT_CAP_MASK) |\\n          (depositCap << DEPOSIT_CAP_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @notice Gets the deposit cap of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The deposit cap\\n   **/\\n  function getDepositCap(ReserveConfiguration configuration) internal pure returns (uint256) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~DEPOSIT_CAP_MASK) >> DEPOSIT_CAP_SHIFT;\\n  }\\n\\n  /**\\n   * @notice Returns new configuration after set the borrow cap\\n   * @param configuration The reserve configuration\\n   * @param borrowCap The borrow cap\\n   **/\\n  function setBorrowCap(\\n    ReserveConfiguration configuration,\\n    uint256 borrowCap\\n  ) internal pure returns (ReserveConfiguration) {\\n    require(borrowCap <= MAX_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    return\\n      ReserveConfiguration.wrap(\\n        (ReserveConfiguration.unwrap(configuration) & BORROW_CAP_MASK) |\\n          (borrowCap << BORROW_CAP_SHIFT)\\n      );\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The borrow cap\\n   **/\\n  function getBorrowCap(ReserveConfiguration configuration) internal pure returns (uint256) {\\n    return (ReserveConfiguration.unwrap(configuration) & ~BORROW_CAP_MASK) >> BORROW_CAP_SHIFT;\\n  }\\n\\n  /**\\n   * @dev Gets the configuration flags of the reserve\\n   * @param configuration The reserve configuration\\n   * @return The state flags of active, frozen and pause\\n   **/\\n  function getFlags(ReserveConfiguration configuration) internal pure returns (bool, bool, bool) {\\n    uint256 conf = ReserveConfiguration.unwrap(configuration);\\n\\n    return ((conf & ~ACTIVE_MASK) != 0, (conf & ~FROZEN_MASK) != 0, (conf & ~PAUSE_MASK) != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x4be4a5c201c7010b02fd0f428b204ac397d4404bcaed0e362585632484ab6bfe\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/types/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\nimport {ReserveConfigurator} from \\\"../../libraries/types/ReserveConfiguration.sol\\\";\\n\\n/**\\n * @notice This configuration is only for borrowable assets. Non-borrowable assets(NFTs) are always collaterals\\n * bit 0, 2, 4, ..., 254: If the reserve is being borrowed\\n * bit 1, 3, 5, ..., 255: If the reserve is used as collateral\\n */\\ntype UserConfiguration is uint256;\\nusing UserConfigurator for UserConfiguration global;\\n\\n/**\\n * @title UserConfigurator library\\n * @author Taker\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfigurator {\\n  string internal constant COMPONENT_NAME = \\\"UC\\\";\\n\\n  uint256 internal constant BORROWING_MASK =\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\n  uint256 internal constant COLLATERAL_MASK =\\n    0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\n\\n  /**\\n   * @dev Sets borrowing status the reserve identified by reserveIndex\\n   * @param configuration The configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @param borrowing True if the user is borrowing from the reserve, false otherwise\\n   * @return New configuration after set borrowing\\n   **/\\n  function setBorrowing(\\n    UserConfiguration configuration,\\n    uint256 reserveIdx,\\n    bool borrowing\\n  ) internal pure returns (UserConfiguration) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx * 2 - 1;\\n    uint256 bitMask = 1 << (position - 1);\\n    if (borrowing) {\\n      return UserConfiguration.wrap(UserConfiguration.unwrap(configuration) | bitMask);\\n    } else {\\n      return UserConfiguration.wrap(UserConfiguration.unwrap(configuration) & ~bitMask);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns if user is borrowing from the reserve\\n   * @param configuration The user configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @return True if the user is using the reserve to borrow, false otherwise\\n   **/\\n  function isBorrowing(\\n    UserConfiguration configuration,\\n    uint256 reserveIdx\\n  ) internal pure returns (bool) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx * 2 - 1;\\n    return (UserConfiguration.unwrap(configuration) >> (position - 1)) & 1 == 1;\\n  }\\n\\n  /**\\n   * @dev Returns if user is borrowing asset from any reserve\\n   * @param configuration The user configuration\\n   * @return True if the user has borrowing from any reserve, false otherwise\\n   **/\\n  function isBorrowingAny(UserConfiguration configuration) internal pure returns (bool) {\\n    return UserConfiguration.unwrap(configuration) & BORROWING_MASK != 0;\\n  }\\n\\n  /**\\n   * @dev Sets if the user is using the reserve as collateral\\n   * @param configuration The configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @param usingAsCollateral True to set using as collateral, false otherwise\\n   * @return New configuration after set using as collateral\\n   **/\\n  function setUsingAsCollateral(\\n    UserConfiguration configuration,\\n    uint256 reserveIdx,\\n    bool usingAsCollateral\\n  ) internal pure returns (UserConfiguration) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx * 2 - 1;\\n    uint256 bitMask = 1 << position;\\n    if (usingAsCollateral) {\\n      return UserConfiguration.wrap(UserConfiguration.unwrap(configuration) | bitMask);\\n    } else {\\n      return UserConfiguration.wrap(UserConfiguration.unwrap(configuration) & ~bitMask);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns if user is using the reserve as collateral\\n   * @param configuration The user configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @return True if the user is using reserve as collateral, false otherwise\\n   **/\\n  function isUsingAsCollateral(\\n    UserConfiguration configuration,\\n    uint256 reserveIdx\\n  ) internal pure returns (bool) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx * 2 - 1;\\n    return (UserConfiguration.unwrap(configuration) >> position) & 1 == 1;\\n  }\\n\\n  /**\\n   * @dev Returns if user has asset as collateral\\n   * @param configuration The user configuration\\n   * @return True if the user has borrowing from any reserve, false otherwise\\n   **/\\n  function isUsingAsCollateralAny(UserConfiguration configuration) internal pure returns (bool) {\\n    return UserConfiguration.unwrap(configuration) & COLLATERAL_MASK != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x794302c4efa2bfa89b5354e69bea1811883cba625912ff926ea9e22891a090f2\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/types/UserNftConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {Errors} from \\\"../Errors.sol\\\";\\nimport {ReserveConfigurator} from \\\"../../libraries/types/ReserveConfiguration.sol\\\";\\n\\n/**\\n * @notice This configuration is only for Non-borrowable assets(NFTs), which are always collaterals\\n */\\ntype UserNftConfiguration is uint256;\\nusing UserNftConfigurator for UserNftConfiguration global;\\n\\n/**\\n * @title UserConfigurator library\\n * @author Taker\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserNftConfigurator {\\n  string internal constant COMPONENT_NAME = \\\"UNC\\\";\\n\\n  uint256 internal constant COLLATERAL_MASK =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * @dev Sets if the user is depositing in this Nft reserve\\n   * @param configuration The configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @param usingAsCollateral True to set using as collateral, false otherwise\\n   * @return New Nft configuration after set using as collateral\\n   **/\\n  function setUsingAsCollateral(\\n    UserNftConfiguration configuration,\\n    uint256 reserveIdx,\\n    bool usingAsCollateral\\n  ) internal pure returns (UserNftConfiguration) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_NFT_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx - 1;\\n    uint256 bitMask = 1 << position;\\n    if (usingAsCollateral) {\\n      return UserNftConfiguration.wrap(UserNftConfiguration.unwrap(configuration) | bitMask);\\n    } else {\\n      return UserNftConfiguration.wrap(UserNftConfiguration.unwrap(configuration) & ~bitMask);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns if user is using the reserve as collateral\\n   * @param configuration The user configuration\\n   * @param reserveIdx The index of the reserve in the bitmap\\n   * @return True if the user is using reserve as collateral, false otherwise\\n   **/\\n  function isUsingAsCollateral(\\n    UserNftConfiguration configuration,\\n    uint256 reserveIdx\\n  ) internal pure returns (bool) {\\n    require(\\n      0 < reserveIdx && reserveIdx < ReserveConfigurator.MAX_NUMBER_NFT_RESERVES,\\n      Errors.genErrMsg(COMPONENT_NAME, Errors.INVALID_INDEX)\\n    );\\n    uint256 position = reserveIdx - 1;\\n    return (UserNftConfiguration.unwrap(configuration) >> position) & 1 == 1;\\n  }\\n\\n  /**\\n   * @dev Returns if user has asset as collateral\\n   * @param configuration The user configuration\\n   * @return True if the user has borrowing from any reserve, false otherwise\\n   **/\\n  function isUsingAsCollateralAny(UserNftConfiguration configuration) internal pure returns (bool) {\\n    return UserNftConfiguration.unwrap(configuration) & COLLATERAL_MASK != 0;\\n  }\\n}\\n\",\"keccak256\":\"0xdf5c1694379d33b670c6a5ee465d415758fac5603596557f11eb4bf6074368bf\",\"license\":\"AGPL-3.0\"},\"contracts/pool/lendingpool/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IScaledERC20} from \\\"../../interfaces/tokens/IScaledERC20.sol\\\";\\nimport {IDebtToken} from \\\"../../interfaces/tokens/IDebtToken.sol\\\";\\nimport {ITToken} from \\\"../../interfaces/tokens/ITToken.sol\\\";\\nimport {ITakerAddressesProvider} from \\\"../../interfaces/configuration/ITakerAddressesProvider.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/oracle/IPriceOracleGetter.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {ITERC20} from \\\"../../interfaces/tokens/ITERC20.sol\\\";\\nimport {ITERC721} from \\\"../../interfaces/tokens/ITERC721.sol\\\";\\nimport {ITERC1155} from \\\"../../interfaces/tokens/ITERC1155.sol\\\";\\n\\nimport {Errors} from \\\"../../libraries/Errors.sol\\\";\\nimport {Reserve} from \\\"../../libraries/types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../../libraries/types/NFTReserve.sol\\\";\\nimport {ReserveConfiguration, ReserveConfigurator} from \\\"../../libraries/types/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration, UserConfigurator} from \\\"../../libraries/types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration, UserNftConfigurator} from \\\"../../libraries/types/UserNftConfiguration.sol\\\";\\nimport {Validator} from \\\"../../libraries/core/Validator.sol\\\";\\nimport {DepositExecutor} from \\\"../../libraries/core/DepositExecutor.sol\\\";\\nimport {BorrowExecutor} from \\\"../../libraries/core/BorrowExecutor.sol\\\";\\nimport {LiquidationExecutor} from \\\"../../libraries/core/LiquidationExecutor.sol\\\";\\nimport {UserVariableCalculator} from \\\"../../libraries/core/UserVariableCalculator.sol\\\";\\nimport {ReserveVariableCalculator} from \\\"../../libraries/core/ReserveVariableCalculator.sol\\\";\\nimport {LendingPoolStorage} from \\\"./LendingPoolStorage.sol\\\";\\n\\n/**\\n * @title LendingPool contract\\n * @author Taker\\n * @dev Core functions of Taker lending protocol\\n **/\\ncontract LendingPool is ReentrancyGuardUpgradeable, LendingPoolStorage {\\n  using Reserve for Reserve.ReserveData;\\n  using NFTReserve for NFTReserve.ReserveData;\\n  using SafeERC20 for IERC20;\\n\\n  modifier onlyLendingPoolConfigurator() {\\n    _onlyLendingPoolConfigurator();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Called by proxy contract\\n   * @param provider The address of the LendingPoolAddressesProvider\\n   **/\\n  function initialize(ITakerAddressesProvider provider) public initializer {\\n    ADDRESS_PROVIDER = provider;\\n    __ReentrancyGuard_init();\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function deposit(address asset, uint256 amount, address to) external override {\\n    Reserve.ReserveData storage reserve = _reserves[asset];\\n    DepositExecutor.deposit(reserve, amount, asset, to);\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function depositNFTs(\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external override {\\n    DepositExecutor.depositNFTs(_nftReserves, _userNftConfigs, nfts, tokenIds, amounts, to);\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function withdraw(address asset, uint256 amount, address to) external override nonReentrant {\\n    DepositExecutor.withdraw(\\n      _reserves,\\n      _nftReserves,\\n      _reserveList,\\n      _nftReserveList,\\n      _userConfigs,\\n      UserVariableCalculator.CalUserStateParam({\\n        userConfig: _userConfigs[msg.sender],\\n        userNFTConfig: _userNftConfigs[msg.sender],\\n        reserveCount: _reserveCount,\\n        nftReserveCount: _nftReserveCount,\\n        user: msg.sender,\\n        oracle: ADDRESS_PROVIDER.getPriceOracle()\\n      }),\\n      asset,\\n      amount,\\n      to\\n    );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function withdrawNFTs(\\n    address[] calldata nfts,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external override nonReentrant {\\n    DepositExecutor.withdrawNFTs(\\n      _reserves,\\n      _nftReserves,\\n      _reserveList,\\n      _nftReserveList,\\n      UserVariableCalculator.CalUserStateParam({\\n        userConfig: _userConfigs[msg.sender],\\n        userNFTConfig: _userNftConfigs[msg.sender],\\n        reserveCount: _reserveCount,\\n        nftReserveCount: _nftReserveCount,\\n        user: msg.sender,\\n        oracle: ADDRESS_PROVIDER.getPriceOracle()\\n      }),\\n      nfts,\\n      tokenIds,\\n      amounts,\\n      to\\n    );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function borrow(address asset, uint256 amount, address from) external override {\\n    BorrowExecutor.borrow(\\n      _reserves,\\n      _nftReserves,\\n      _reserveList,\\n      _nftReserveList,\\n      _userConfigs,\\n      UserVariableCalculator.CalUserStateParam({\\n        userConfig: _userConfigs[from],\\n        userNFTConfig: _userNftConfigs[from],\\n        reserveCount: _reserveCount,\\n        nftReserveCount: _nftReserveCount,\\n        user: from,\\n        oracle: ADDRESS_PROVIDER.getPriceOracle()\\n      }),\\n      amount,\\n      asset,\\n      from\\n    );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function repay(address asset, uint256 amount, address to) external override returns (uint256) {\\n    return BorrowExecutor.repay(_reserves[asset], _userConfigs, asset, amount, to);\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function liquidate(\\n    address nft,\\n    uint256 tokenId,\\n    address debt,\\n    address user,\\n    address to,\\n    bool receiveTNFT\\n  ) external override nonReentrant {\\n    LiquidationExecutor.LiquidateParams memory params;\\n    {\\n      params = LiquidationExecutor.LiquidateParams({\\n        calUserStateParams: UserVariableCalculator.CalUserStateParam({\\n          userConfig: _userConfigs[user],\\n          userNFTConfig: _userNftConfigs[user],\\n          reserveCount: _reserveCount,\\n          nftReserveCount: _nftReserveCount,\\n          user: user,\\n          oracle: ADDRESS_PROVIDER.getPriceOracle()\\n        }),\\n        liquidator: msg.sender,\\n        to: to,\\n        debt: debt,\\n        receiveTNFT: receiveTNFT\\n      });\\n    }\\n    LiquidationExecutor.liquidate(\\n      _reserves,\\n      _nftReserves,\\n      _reserveList,\\n      _nftReserveList,\\n      nft,\\n      tokenId,\\n      params\\n    );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function initReserve(\\n    address asset,\\n    ReserveConfiguration configuration,\\n    address tTokenAddress,\\n    address debtAddress,\\n    address interestRateStrategyAddress\\n  ) external override onlyLendingPoolConfigurator {\\n    require(Address.isContract(asset), Errors.genErrMsg(NAME, Errors.NOT_A_CONTRACT));\\n    require(\\n      _nftReserves[asset].id == 0 && _reserves[asset].id == 0,\\n      Errors.genErrMsg(NAME, Errors.RESERVE_ALREADY_INITIALIZED)\\n    );\\n    _reserves[asset].init(configuration, tTokenAddress, debtAddress, interestRateStrategyAddress);\\n    require(\\n      _reserveCount < MAX_NUMBER_RESERVES,\\n      Errors.genErrMsg(NAME, Errors.NO_MORE_RESERVES_ALLOWED)\\n    );\\n\\n    _reserves[asset].id = uint8(_reserveCount) + 1;\\n    _reserveList[_reserveCount + 1] = asset;\\n    _reserveCount += 1;\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function initNFTReserve(\\n    address asset,\\n    ReserveConfiguration configuration,\\n    address tNFTAddress\\n  ) external override onlyLendingPoolConfigurator {\\n    require(Address.isContract(asset), Errors.genErrMsg(NAME, Errors.NOT_A_CONTRACT));\\n    require(\\n      _nftReserves[asset].id == 0 && _reserves[asset].id == 0,\\n      Errors.genErrMsg(NAME, Errors.RESERVE_ALREADY_INITIALIZED)\\n    );\\n    _nftReserves[asset].init(configuration, tNFTAddress);\\n    require(\\n      _nftReserveCount < MAX_NUMBER_NFT_RESERVES,\\n      Errors.genErrMsg(NAME, Errors.NO_MORE_NFT_RESERVES_ALLOWED)\\n    );\\n\\n    _nftReserves[asset].id = uint8(_nftReserveCount) + 1;\\n    _nftReserveList[_nftReserveCount + 1] = asset;\\n    _nftReserveCount += 1;\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function dropReserve(address asset) external override onlyLendingPoolConfigurator {\\n    bool isNft = Validator.validateDropReserve(\\n      _reserveList,\\n      _nftReserveList,\\n      _reserves[asset],\\n      _nftReserves[asset],\\n      asset\\n    );\\n    if (isNft) {\\n      _nftReserveList[_nftReserves[asset].id] = address(0);\\n      delete _nftReserves[asset];\\n    } else {\\n      _reserveList[_reserves[asset].id] = address(0);\\n      delete _reserves[asset];\\n    }\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function validateTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore\\n  ) external override {\\n    require(\\n      msg.sender == _reserves[asset].tTokenAddress,\\n      Errors.genErrMsg(NAME, Errors.NOT_TTOKEN)\\n    );\\n    Validator.performBaseCheck(_reserves[asset].configuration, amount, false);\\n    if (from != to && amount != 0) {\\n      uint256 reserveId = _reserves[asset].id;\\n      UserConfiguration userConfig = _userConfigs[from];\\n\\n      if (userConfig.isUsingAsCollateral(reserveId)) {\\n        if (userConfig.isBorrowingAny()) {\\n          Validator.validateUserHealth(\\n            _reserves,\\n            _nftReserves,\\n            _reserveList,\\n            _nftReserveList,\\n            UserVariableCalculator.CalUserStateParam({\\n              userConfig: userConfig,\\n              userNFTConfig: _userNftConfigs[from],\\n              reserveCount: _reserveCount,\\n              nftReserveCount: _nftReserveCount,\\n              user: from,\\n              oracle: ADDRESS_PROVIDER.getPriceOracle()\\n            })\\n          );\\n        }\\n        if (balanceFromBefore == amount) {\\n          userConfig.setUsingAsCollateral(reserveId, false);\\n          emit CollateralStatusUpdated(asset, from, false);\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function validateTransferNft(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external view override {\\n    require(\\n      msg.sender == _nftReserves[asset].tNFTAddress,\\n      Errors.genErrMsg(NAME, Errors.NOT_TTOKEN)\\n    );\\n    Validator.performBaseCheck(_nftReserves[asset].configuration, amount, false);\\n    UserConfiguration userConfig = _userConfigs[from];\\n    if (from != to && amount != 0) {\\n      if (userConfig.isBorrowingAny()) {\\n        Validator.validateUserHealth(\\n          _reserves,\\n          _nftReserves,\\n          _reserveList,\\n          _nftReserveList,\\n          UserVariableCalculator.CalUserStateParam({\\n            userConfig: userConfig,\\n            userNFTConfig: _userNftConfigs[from],\\n            reserveCount: _reserveCount,\\n            nftReserveCount: _nftReserveCount,\\n            user: from,\\n            oracle: ADDRESS_PROVIDER.getPriceOracle()\\n          })\\n        );\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function setUserUsingAsCollateral(address asset, bool usingAsCollateral) external override {\\n    DepositExecutor.setUserUsingAsCollateral(\\n      _reserves,\\n      _nftReserves,\\n      _reserveList,\\n      _nftReserveList,\\n      _userConfigs,\\n      UserVariableCalculator.CalUserStateParam({\\n        userConfig: _userConfigs[msg.sender],\\n        userNFTConfig: _userNftConfigs[msg.sender],\\n        reserveCount: _reserveCount,\\n        nftReserveCount: _nftReserveCount,\\n        user: msg.sender,\\n        oracle: ADDRESS_PROVIDER.getPriceOracle()\\n      }),\\n      asset,\\n      usingAsCollateral\\n    );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getReserveNormalizedLiquidityScale(\\n    address asset\\n  ) external view virtual override returns (uint256) {\\n    return _reserves[asset].getNormalizedLiquidityScale();\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getReserveNormalizedDebtScale(\\n    address asset\\n  ) external view virtual override returns (uint256) {\\n    return _reserves[asset].getNormalizedDebtScale();\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getReserveData(\\n    address asset\\n  ) external view override returns (Reserve.ReserveData memory) {\\n    return _reserves[asset];\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getNftReserveData(\\n    address asset\\n  ) external view override returns (NFTReserve.ReserveData memory) {\\n    return _nftReserves[asset];\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getReservesList() external view returns (address[] memory, address[] memory) {\\n    address[] memory reserveList = new address[](_reserveCount);\\n    for (uint256 i = 0; i < _reserveCount; i++) {\\n      reserveList[i] = _reserveList[i + 1];\\n    }\\n    address[] memory nftReserveList = new address[](_nftReserveCount);\\n    for (uint256 i = 0; i < _nftReserveCount; i++) {\\n      nftReserveList[i] = _nftReserveList[i + 1];\\n    }\\n    return (reserveList, nftReserveList);\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function setReserveConfig(\\n    address asset,\\n    bool isNft,\\n    ReserveConfiguration configuration\\n  ) external override onlyLendingPoolConfigurator {\\n    if (isNft) {\\n      require(_nftReserves[asset].id != 0, Errors.genErrMsg(NAME, Errors.NONEXIST_RESERVE));\\n      _nftReserves[asset].configuration = configuration;\\n      return;\\n    }\\n    require(_reserves[asset].id != 0, Errors.genErrMsg(NAME, Errors.NONEXIST_RESERVE));\\n    _reserves[asset].configuration = configuration;\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getReserveConfig(\\n    address asset,\\n    bool isNft\\n  ) external view override returns (ReserveConfiguration) {\\n    if (isNft) {\\n      return _nftReserves[asset].configuration;\\n    }\\n    return _reserves[asset].configuration;\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getUserConfig(\\n    address user\\n  ) external view override returns (UserConfiguration, UserNftConfiguration) {\\n    return (_userConfigs[user], _userNftConfigs[user]);\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function setReserveInterestRateCalculatorAddress(\\n    address asset,\\n    address interestRateCalculatorAddress\\n  ) external override onlyLendingPoolConfigurator {\\n    _reserves[asset].interestRateCalculatorAddress = interestRateCalculatorAddress;\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getPoolValues() external view override returns (uint256, uint256, uint256) {\\n    return\\n      ReserveVariableCalculator.calculateTotalLiquidity(\\n        _reserves,\\n        _nftReserves,\\n        _reserveList,\\n        _nftReserveList,\\n        ReserveVariableCalculator.CalReserveStateParam({\\n          reserveCount: _reserveCount,\\n          nftReserveCount: _nftReserveCount,\\n          oracle: ADDRESS_PROVIDER.getPriceOracle()\\n        })\\n      );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getAssetValues(address asset) external view override returns (uint256, uint256) {\\n    return\\n      ReserveVariableCalculator.calculateReserveValues(\\n        _reserves,\\n        _nftReserves,\\n        asset,\\n        ADDRESS_PROVIDER.getPriceOracle()\\n      );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getUserState(\\n    address user\\n  ) external view override returns (UserVariableCalculator.StateVar memory) {\\n    return\\n      UserVariableCalculator.calculateUserStateVariables(\\n        _reserves,\\n        _nftReserves,\\n        _reserveList,\\n        _nftReserveList,\\n        UserVariableCalculator.CalUserStateParam({\\n          userConfig: _userConfigs[user],\\n          userNFTConfig: _userNftConfigs[user],\\n          reserveCount: _reserveCount,\\n          nftReserveCount: _nftReserveCount,\\n          user: user,\\n          oracle: ADDRESS_PROVIDER.getPriceOracle()\\n        })\\n      );\\n  }\\n\\n  /// @inheritdoc ILendingPool\\n  function getUserAssetValues(\\n    address user,\\n    address asset\\n  ) external view override returns (uint256, uint256, uint256) {\\n    return\\n      UserVariableCalculator.calculateUserAssetValues(\\n        _reserves,\\n        _nftReserves,\\n        asset,\\n        UserVariableCalculator.CalUserStateParam({\\n          userConfig: _userConfigs[user],\\n          userNFTConfig: _userNftConfigs[user],\\n          reserveCount: _reserveCount,\\n          nftReserveCount: _nftReserveCount,\\n          user: user,\\n          oracle: ADDRESS_PROVIDER.getPriceOracle()\\n        })\\n      );\\n  }\\n\\n  function _onlyLendingPoolConfigurator() internal view {\\n    require(\\n      ADDRESS_PROVIDER.getLendingPoolConfigurator() == msg.sender,\\n      Errors.genErrMsg(NAME, Errors.ONLY_LENDING_POOL_CONFIGURATOR)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x8b8de1bf0cd1c988066542f0af61fbb3fcd0a4b8c22851e0842c3f47ebfc83fc\",\"license\":\"AGPL-3.0\"},\"contracts/pool/lendingpool/LendingPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.14;\\n\\nimport {ITakerAddressesProvider} from \\\"../../interfaces/configuration/ITakerAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {UserConfiguration} from \\\"../../libraries/types/UserConfiguration.sol\\\";\\nimport {UserNftConfiguration} from \\\"../../libraries/types/UserNftConfiguration.sol\\\";\\nimport {Reserve} from \\\"../../libraries/types/Reserve.sol\\\";\\nimport {NFTReserve} from \\\"../../libraries/types/NFTReserve.sol\\\";\\n\\n/**\\n * @title LendingPoolStorage\\n * @author Taker\\n * @notice Variables of lendingpool\\n */\\nabstract contract LendingPoolStorage is ILendingPool {\\n  string public constant NAME = \\\"LP\\\";\\n  uint256 public constant MAX_NUMBER_RESERVES = 128;\\n  uint256 public constant MAX_NUMBER_NFT_RESERVES = 256;\\n\\n  ITakerAddressesProvider public ADDRESS_PROVIDER;\\n\\n  mapping(address => Reserve.ReserveData) internal _reserves;\\n  mapping(address => NFTReserve.ReserveData) internal _nftReserves;\\n  mapping(address => UserConfiguration) internal _userConfigs;\\n  mapping(address => UserNftConfiguration) internal _userNftConfigs;\\n\\n  mapping(uint256 => address) internal _reserveList;\\n  mapping(uint256 => address) internal _nftReserveList;\\n\\n  uint256 internal _reserveCount;\\n  uint256 internal _nftReserveCount;\\n}\\n\",\"keccak256\":\"0xdf0e5a3b8f983010d61cef9695c132db18931285fb090969905b78e99b571a95\",\"license\":\"AGPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a1e80620000216000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806377a8313e1161010f578063c4d66de8116100a2578063f45346dc11610071578063f45346dc14610675578063f505743a14610688578063f66fdcca1461074c578063f8119d511461075457600080fd5b8063c4d66de814610630578063cca5bffd14610643578063d1946dbc14610656578063e7dc9ef61461066c57600080fd5b806391978826116100de57806391978826146105ae578063a3f4df7e146105c1578063ac4b088c1461060a578063c1b4ab8f1461061d57600080fd5b806377a8313e146105475780637d2fd4cc1461055a578063903e61a4146105885780639100e4a31461059b57600080fd5b80633c34822e1161018757806363c9b8601161015657806363c9b860146104fb57806369328dec1461050e57806369cab562146105215780636c665a551461053457600080fd5b80633c34822e146104595780633ec8e52d1461046c578063416ae7681461047f5780635ceae9c4146104e857600080fd5b80631848effa116101c35780631848effa1461027d5780631854b241146102c257806322829a21146102d557806335ea6a75146102e857600080fd5b806311de1fee146101ea57806316626ab9146101ff578063178c21a51461025c575b600080fd5b6101fd6101f8366004614a70565b61075c565b005b61024261020d366004614b1e565b73ffffffffffffffffffffffffffffffffffffffff166000908152603660209081526040808320546037909252909120549091565b604080519283526020830191909152015b60405180910390f35b61026f61026a366004614b50565b6108ea565b604051908152602001610253565b60335461029d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610253565b6101fd6102d0366004614b85565b61094c565b6101fd6102e3366004614a70565b610e86565b61044c6102f6366004614b1e565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091525073ffffffffffffffffffffffffffffffffffffffff9081166000908152603460209081526040918290208251610160810184528154815260018201546fffffffffffffffffffffffffffffffff808216948301949094527001000000000000000000000000000000009081900484169482019490945260028201548084166060830152939093049091166080830152600381015464ffffffffff811660a0840152650100000000009004831660c08301526004810154831660e083015260058101548316610100830152600601549182166101208201527401000000000000000000000000000000000000000090910460ff1661014082015290565b6040516102539190614be0565b6101fd610467366004614d2c565b610f21565b6101fd61047a366004614d65565b610f7f565b61049261048d366004614b1e565b6113be565b6040516102539190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61026f6104f6366004614db6565b61157c565b6101fd610509366004614b1e565b611658565b6101fd61051c366004614db6565b61184e565b61026f61052f366004614b1e565b6119d3565b6101fd610542366004614db6565b611a01565b6101fd610555366004614b50565b611b72565b61056d610568366004614d2c565b611ce3565b60408051938452602084019290925290820152606001610253565b61026f610596366004614b1e565b611e6c565b6101fd6105a9366004614df8565b611e9a565b6101fd6105bc366004614e6d565b6120df565b6105fd6040518060400160405280600281526020017f4c5000000000000000000000000000000000000000000000000000000000000081525081565b6040516102539190614f25565b6101fd610618366004614db6565b61247b565b6101fd61062b366004614f38565b612aa3565b6101fd61063e366004614b1e565b6130db565b610242610651366004614b1e565b6132ad565b61065e61340b565b604051610253929190614ff1565b61026f61010081565b6101fd610683366004614db6565b6135d3565b610711610696366004614b1e565b60408051606080820183526000808352602080840182905292840181905273ffffffffffffffffffffffffffffffffffffffff948516815260358352839020835191820184528054825260010154938416918101919091527401000000000000000000000000000000000000000090920460ff169082015290565b604080518251815260208084015173ffffffffffffffffffffffffffffffffffffffff16908201529181015160ff1690820152606001610253565b61056d613693565b61026f608081565b610764613838565b6040805160c0810182523360008181526036602090815284822054845282825260378152908490205481840152603a5483850152603b546060840152608083019190915260335483517ffca513a8000000000000000000000000000000000000000000000000000000008152935173253F8A4d800B904E6184f91281d9CCf6C1c21F4294631526ecfc9460349460359460389460399460a085019373ffffffffffffffffffffffffffffffffffffffff9093169263fca513a8926004808401938290030181865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190615016565b73ffffffffffffffffffffffffffffffffffffffff168152508d8d8d8d8d8d8d6040518d63ffffffff1660e01b81526004016108a89c9b9a999897969594939291906150cd565b60006040518083038186803b1580156108c057600080fd5b505af41580156108d4573d6000803e3d6000fd5b505050506108e160018055565b50505050505050565b6000811561091e575073ffffffffffffffffffffffffffffffffffffffff8216600090815260356020526040902054610946565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152603460205260409020545b92915050565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152603460209081526040918290206003015482518084018452600281527f4c500000000000000000000000000000000000000000000000000000000000008184015283518085018552600181527f36000000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081523365010000000000909204909416149273adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE92635b70017b92610a3a926004016151b6565b600060405180830381865af4158015610a57573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a9d919081019061520a565b90610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b60405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603460205260408082205490517f041a352d00000000000000000000000000000000000000000000000000000000815260048101919091526024810184905260448101919091527338d7C2aE08c3080cE1d5a1cBF4B437D6d9CCEFFF9063041a352d9060640160006040518083038186803b158015610b7957600080fd5b505af4158015610b8d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610bcc57508115155b15610e7f5773ffffffffffffffffffffffffffffffffffffffff858116600090815260346020908152604080832060060154938816835260369091529020547401000000000000000000000000000000000000000090910460ff1690610c3281836138b1565b156108e1577f5555555555555555555555555555555555555555555555555555555555555555811615610dfe577338d7C2aE08c3080cE1d5a1cBF4B437D6d9CCEFFF633264718560346035603860396040518060c00160405280888152602001603760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001603a548152602001603b5481526020018d73ffffffffffffffffffffffffffffffffffffffff168152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b8152600401610dcd9594939291906152d5565b60006040518083038186803b158015610de557600080fd5b505af4158015610df9573d6000803e3d6000fd5b505050505b8383036108e157610e1181836000613a2c565b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f6577e2a7395d7723b4b430421166c5269712d1766166379838f96f218c5cde4a6000604051610e74911515815260200190565b60405180910390a350505b5050505050565b6040517f23a6dd8b00000000000000000000000000000000000000000000000000000000815273253F8A4d800B904E6184f91281d9CCf6C1c21F42906323a6dd8b90610ee8906035906037908c908c908c908c908c908c908c9060040161535b565b60006040518083038186803b158015610f0057600080fd5b505af4158015610f14573d6000803e3d6000fd5b5050505050505050505050565b610f29613bb9565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020526040902060050180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b73ffffffffffffffffffffffffffffffffffffffff84811660009081526035602090815260409182902060019081015483518085018552600281527f4c5000000000000000000000000000000000000000000000000000000000000081850152845180860186529283527f36000000000000000000000000000000000000000000000000000000000000009383019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081529290931633149273adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE92635b70017b926110679290916004016151b6565b600060405180830381865af4158015611084573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110ca919081019061520a565b90611102576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff84166000908152603560205260408082205490517f041a352d00000000000000000000000000000000000000000000000000000000815260048101919091526024810183905260448101919091527338d7C2aE08c3080cE1d5a1cBF4B437D6d9CCEFFF9063041a352d9060640160006040518083038186803b15801561119d57600080fd5b505af41580156111b1573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff838116600081815260366020526040902054918416148015906111ec57508115155b15610e7f577f5555555555555555555555555555555555555555555555555555555555555555811615610e7f577338d7C2aE08c3080cE1d5a1cBF4B437D6d9CCEFFF633264718560346035603860396040518060c00160405280888152602001603760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001603a548152602001603b5481526020018b73ffffffffffffffffffffffffffffffffffffffff168152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b81526004016113879594939291906152d5565b60006040518083038186803b15801561139f57600080fd5b505af41580156113b3573d6000803e3d6000fd5b505050505050505050565b6113fe6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff80851660008181526036602090815285822054855282825260378152908590205481850152603a5484860152603b546060850152608084019190915260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173eb202543B4FEf4e51c98116e714DBEC048f0404d9563f74c32ba95603495603595603895603995939460a0860194919093169263fca513a89260048083019391928290030181865afa1580156114de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115029190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b815260040161153b9594939291906152d5565b60e060405180830381865af4158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094691906153d0565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602052604080822090517f14bd970300000000000000000000000000000000000000000000000000000000815260048101919091526036602482015260448101929092526064820185905291831660848201527351Ae44B191Ad79C217c178BeaD9606A59701aBaf906314bd97039060a401602060405180830381865af415801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190615454565b90505b9392505050565b611660613bb9565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603460209081526040808320603590925282206116a0916038916039919086613da4565b90508015611750575073ffffffffffffffffffffffffffffffffffffffff16600081815260356020818152604080842060018101805474010000000000000000000000000000000000000000900460ff1686526039845291852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055948452919052915580547fffffffffffffffffffffff000000000000000000000000000000000000000000169055565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260346020818152604080842060068101805474010000000000000000000000000000000000000000900460ff1686526038845291852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155958552929091528282556001820183905560028201929092556003810180547fffffffffffffff0000000000000000000000000000000000000000000000000016905560048101805484169055600501805490921690915580547fffffffffffffffffffffff0000000000000000000000000000000000000000001690555b5050565b611856613838565b6040805160c0810182523360008181526036602081815285832054855283835260378152918590205482850152603a5484860152603b546060850152608084019290925260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173253F8A4d800B904E6184f91281d9CCf6C1c21F42956365f37fab95603495603595603895603995929460a085019373ffffffffffffffffffffffffffffffffffffffff9092169263fca513a8926004808401938290030181865afa158015611931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119559190615016565b73ffffffffffffffffffffffffffffffffffffffff168152508a8a8a6040518a63ffffffff1660e01b81526004016119959998979695949392919061546d565b60006040518083038186803b1580156119ad57600080fd5b505af41580156119c1573d6000803e3d6000fd5b505050506119ce60018055565b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603460205260408120610946906145f0565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff80841660008181526036602081815286832054865283835260378152918690205482860152603a5485870152603b546060860152608085019290925260335485517ffca513a800000000000000000000000000000000000000000000000000000000815295517351Ae44B191Ad79C217c178BeaD9606A59701aBaf9663272095b4966034966035966038966039969195939460a0860194929093169263fca513a892600480830193928290030181865afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190615016565b73ffffffffffffffffffffffffffffffffffffffff16815250898b8a6040518a63ffffffff1660e01b8152600401611b469998979695949392919061552c565b60006040518083038186803b158015611b5e57600080fd5b505af41580156108e1573d6000803e3d6000fd5b6040805160c0810182523360008181526036602081815285832054855283835260378152918590205482850152603a5484860152603b546060850152608084019290925260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173253F8A4d800B904E6184f91281d9CCf6C1c21F429563c11d580d95603495603595603895603995929460a085019373ffffffffffffffffffffffffffffffffffffffff9092169263fca513a8926004808401938290030181865afa158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c719190615016565b73ffffffffffffffffffffffffffffffffffffffff1681525089896040518963ffffffff1660e01b8152600401611caf9897969594939291906155e8565b60006040518083038186803b158015611cc757600080fd5b505af4158015611cdb573d6000803e3d6000fd5b505050505050565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808516600081815260366020908152858220548552828252603781528582205481860152603a5485870152603b546060860152608085019290925260335485517ffca513a8000000000000000000000000000000000000000000000000000000008152955191958695869573eb202543B4FEf4e51c98116e714DBEC048f0404d95636ac0885e956034956035958d959460a086019492169263fca513a8926004808401939192918290030181865afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518563ffffffff1660e01b8152600401611e1e949392919061569d565b606060405180830381865af4158015611e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5f9190615726565b9250925092509250925092565b73ffffffffffffffffffffffffffffffffffffffff811660009081526034602052604081206109469061466f565b611ea2613838565b6040805161016081018252600060a0820181815260c0830182905260e08301829052610100830182905261012083018290526101408301829052825260208201819052918101829052606081018290526080810191909152604080516101608101825273ffffffffffffffffffffffffffffffffffffffff8087166000818152603660209081528582205460a0860190815283835260378252918690205460c0860152603a5460e0860152603b5461010086015261012085019290925260335485517ffca513a8000000000000000000000000000000000000000000000000000000008152955194958695929461014087019492169263fca513a8926004808401939192918290030181865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190615016565b73ffffffffffffffffffffffffffffffffffffffff1681525081526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001831515815250905073e1c29C0fbF6DD761B912920bca197675549dE20a63422054a760346035603860398c8c886040518863ffffffff1660e01b81526004016120a59796959493929190615754565b60006040518083038186803b1580156120bd57600080fd5b505af41580156120d1573d6000803e3d6000fd5b5050505050611cdb60018055565b6120e7613bb9565b81156122b45773ffffffffffffffffffffffffffffffffffffffff8316600090815260356020908152604091829020600101548251808401845260028082527f4c5000000000000000000000000000000000000000000000000000000000000082850152845180860186529081527f31360000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090910460ff1615159273adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE92635b70017b926121eb9291906004016151b6565b600060405180830381865af4158015612208573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261224e919081019061520a565b90612286576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff83166000908152603560205260409020819055505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260346020908152604091829020600601548251808401845260028082527f4c5000000000000000000000000000000000000000000000000000000000000082850152845180860186529081527f31360000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090910460ff1615159273adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE92635b70017b926123b29291906004016151b6565b600060405180830381865af41580156123cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612415919081019061520a565b9061244d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff83166000908152603460205260409020819055505050565b612483613bb9565b73ffffffffffffffffffffffffffffffffffffffff83163b151573adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016125409291906151b6565b600060405180830381865af415801561255d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526125a3919081019061520a565b906125db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff831660009081526035602052604090206001015474010000000000000000000000000000000000000000900460ff1615801561266e575073ffffffffffffffffffffffffffffffffffffffff831660009081526034602052604090206006015474010000000000000000000000000000000000000000900460ff16155b73adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31350000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016127119291906151b6565b600060405180830381865af415801561272e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612774919081019061520a565b906127ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff8381166000908152603560205260409081902090517f38f988900000000000000000000000000000000000000000000000000000000081526004810191909152602481018490529082166044820152734a1DbbB24d3d6d368630Ee6f67D8B47d5C3F6203906338f988909060640160006040518083038186803b15801561284857600080fd5b505af415801561285c573d6000803e3d6000fd5b50505050610100603b541073adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f33310000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b815260040161290a9291906151b6565b600060405180830381865af4158015612927573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261296d919081019061520a565b906129a5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50603b546129b4906001615862565b73ffffffffffffffffffffffffffffffffffffffff841660009081526035602052604081206001908101805460ff9490941674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90941693909317909255603b54859260399291612a3a91615887565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603b6000828254612a999190615887565b9091555050505050565b612aab613bb9565b73ffffffffffffffffffffffffffffffffffffffff85163b151573adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612b689291906151b6565b600060405180830381865af4158015612b85573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612bcb919081019061520a565b90612c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526035602052604090206001015474010000000000000000000000000000000000000000900460ff16158015612c96575073ffffffffffffffffffffffffffffffffffffffff851660009081526034602052604090206006015474010000000000000000000000000000000000000000900460ff16155b73adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31350000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612d399291906151b6565b600060405180830381865af4158015612d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612d9c919081019061520a565b90612dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff8581166000908152603460205260409081902090517f274f5c5b000000000000000000000000000000000000000000000000000000008152600481019190915260248101869052848216604482015283821660648201529082166084820152732209fb58a557AE00697DE99997be5d88f9EBfb559063274f5c5b9060a40160006040518083038186803b158015612e8057600080fd5b505af4158015612e94573d6000803e3d6000fd5b505050506080603a541073adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f33300000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612f419291906151b6565b600060405180830381865af4158015612f5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612fa4919081019061520a565b90612fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50603a54612feb906001615862565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603460205260408120600601805460ff9390931674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90931692909217909155603a548691603891613070906001615887565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603a60008282546130cf9190615887565b90915550505050505050565b600054610100900460ff16158080156130fb5750600054600160ff909116105b806131155750303b158015613115575060005460ff166001145b6131a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156131ff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055613247614712565b801561184a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600080739B35eEC54BbE3246E6790d680a7d212Da66e192a6337002cf46034603586603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561333c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133609190615016565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526004810194909452602484019290925273ffffffffffffffffffffffffffffffffffffffff90811660448401521660648201526084016040805180830381865af41580156133de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613402919061589f565b91509150915091565b6060806000603a5467ffffffffffffffff81111561342b5761342b6151db565b604051908082528060200260200182016040528015613454578160200160208202803683370190505b50905060005b603a548110156134eb5760386000613473836001615887565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106134b4576134b46158c3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806134e3816158f2565b91505061345a565b506000603b5467ffffffffffffffff811115613509576135096151db565b604051908082528060200260200182016040528015613532578160200160208202803683370190505b50905060005b603b548110156135c95760396000613551836001615887565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110613592576135926158c3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806135c1816158f2565b915050613538565b5090939092509050565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152603460205260409081902090517fda9eaeed00000000000000000000000000000000000000000000000000000000815260048101829052602481018690526044810192909252918316606482015273253F8A4d800B904E6184f91281d9CCf6C1c21F429063da9eaeed9060840160006040518083038186803b15801561367557600080fd5b505af4158015613689573d6000803e3d6000fd5b5050505050505050565b6000806000739B35eEC54BbE3246E6790d680a7d212Da66e192a6371251af860346035603860396040518060600160405280603a548152602001603b548152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137669190615016565b73ffffffffffffffffffffffffffffffffffffffff908116909152604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b168152600481019790975260248701959095526044860193909352606485019190915280516084850152602081015160a4850152909101511660c482015260e401606060405180830381865af4158015613809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382d9190615726565b925092509250909192565b6002600154036138a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ad5565b6002600155565b60018055565b60008160001080156138c35750608082105b73adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f55430000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32330000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016139669291906151b6565b600060405180830381865af4158015613983573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526139c9919081019061520a565b90613a01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5060006001613a1184600261592a565b613a1b9190615967565b9390931c6001908116149392505050565b6000826000108015613a3e5750608083105b73adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f55430000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32330000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613ae19291906151b6565b600060405180830381865af4158015613afe573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613b44919081019061520a565b90613b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5060006001613b8c85600261592a565b613b969190615967565b90506001811b8315613bad57851791506116519050565b19851691506116519050565b603354604080517f85c858b10000000000000000000000000000000000000000000000000000000081529051339273ffffffffffffffffffffffffffffffffffffffff16916385c858b19160048083019260209291908290030181865afa158015613c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4c9190615016565b73ffffffffffffffffffffffffffffffffffffffff161473adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f32000000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613d069291906151b6565b600060405180830381865af4158015613d23573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613d69919081019061520a565b90613da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141573adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31370000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613e799291906151b6565b600060405180830381865af4158015613e96573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613edc919081019061520a565b90613f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600684015474010000000000000000000000000000000000000000900460ff16151580613f68575060008080526020879052604090205473ffffffffffffffffffffffffffffffffffffffff8381169116145b80613f915750600183015474010000000000000000000000000000000000000000900460ff1615155b80613fc2575060008080526020869052604090205473ffffffffffffffffffffffffffffffffffffffff8381169116145b6040518060400160405280600281526020017f313600000000000000000000000000000000000000000000000000000000000081525090614030576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600384015465010000000000900473ffffffffffffffffffffffffffffffffffffffff161561440d57600480850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926318160ddd9282820192602092908290030181865afa1580156140c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ed9190615454565b60001473adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016141939291906151b6565b600060405180830381865af41580156141b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526141f6919081019061520a565b9061422e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b508360030160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561429e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c29190615454565b60001473adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31380000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016143689291906151b6565b600060405180830381865af4158015614385573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143cb919081019061520a565b90614403576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600090506145e7565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561447c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a09190615454565b60001473adf6B6d4F628Cd21a4648FcF859Df33e975ef0cE635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31380000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016145469291906151b6565b600060405180830381865af4158015614563573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526145a9919081019061520a565b906145e1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600190505b95945050505050565b600381015460009064ffffffffff9081169042908116820361462857505050600101546fffffffffffffffffffffffffffffffff1690565b600184015460028501546000916145e7916fffffffffffffffffffffffffffffffff91821691614669911661466464ffffffffff881687615967565b6147b3565b906147e7565b600381015460009064ffffffffff908116904290811682036146bb575050506001015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b600184015460028501546000916145e7916fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009283900481169261466992041661470d64ffffffffff881687615967565b614839565b600054610100900460ff166147a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ad5565b6147b161496b565b565b6000806147c0838561592a565b6301e13380900490506147df816b033b2e3c9fd0803ce8000000615887565b949350505050565b60008215806147f4575081155b1561480157506000610946565b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e74000000614825848661592a565b61482f9190615887565b61165191906159ad565b60008160000361485657506b033b2e3c9fd0803ce8000000610946565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600080806002861161488c576000614891565b600286035b925066038882915c40006148a588806147e7565b816148b2576148b261597e565b0491506301e133806148c483896147e7565b816148d1576148d161597e565b0490506000826148e1868961592a565b6148eb919061592a565b600290049050600082856148ff888b61592a565b614909919061592a565b614913919061592a565b60069004905080826301e1338061492a8b8d61592a565b61493491906159ad565b61494a906b033b2e3c9fd0803ce8000000615887565b6149549190615887565b61495e9190615887565b9998505050505050505050565b600054610100900460ff166138ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ad5565b60008083601f840112614a1457600080fd5b50813567ffffffffffffffff811115614a2c57600080fd5b6020830191508360208260051b8501011115614a4757600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114613da157600080fd5b60008060008060008060006080888a031215614a8b57600080fd5b873567ffffffffffffffff80821115614aa357600080fd5b614aaf8b838c01614a02565b909950975060208a0135915080821115614ac857600080fd5b614ad48b838c01614a02565b909750955060408a0135915080821115614aed57600080fd5b50614afa8a828b01614a02565b9094509250506060880135614b0e81614a4e565b8091505092959891949750929550565b600060208284031215614b3057600080fd5b813561165181614a4e565b80358015158114614b4b57600080fd5b919050565b60008060408385031215614b6357600080fd5b8235614b6e81614a4e565b9150614b7c60208401614b3b565b90509250929050565b600080600080600060a08688031215614b9d57600080fd5b8535614ba881614a4e565b94506020860135614bb881614a4e565b93506040860135614bc881614a4e565b94979396509394606081013594506080013592915050565b81518152602080830151610160830191614c0d908401826fffffffffffffffffffffffffffffffff169052565b506040830151614c3160408401826fffffffffffffffffffffffffffffffff169052565b506060830151614c5560608401826fffffffffffffffffffffffffffffffff169052565b506080830151614c7960808401826fffffffffffffffffffffffffffffffff169052565b5060a0830151614c9260a084018264ffffffffff169052565b5060c0830151614cba60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0830151614ce260e084018273ffffffffffffffffffffffffffffffffffffffff169052565b506101008381015173ffffffffffffffffffffffffffffffffffffffff9081169184019190915261012080850151909116908301526101409283015160ff16929091019190915290565b60008060408385031215614d3f57600080fd5b8235614d4a81614a4e565b91506020830135614d5a81614a4e565b809150509250929050565b60008060008060808587031215614d7b57600080fd5b8435614d8681614a4e565b93506020850135614d9681614a4e565b92506040850135614da681614a4e565b9396929550929360600135925050565b600080600060608486031215614dcb57600080fd5b8335614dd681614a4e565b9250602084013591506040840135614ded81614a4e565b809150509250925092565b60008060008060008060c08789031215614e1157600080fd5b8635614e1c81614a4e565b9550602087013594506040870135614e3381614a4e565b93506060870135614e4381614a4e565b92506080870135614e5381614a4e565b9150614e6160a08801614b3b565b90509295509295509295565b600080600060608486031215614e8257600080fd5b8335614e8d81614a4e565b9250614e9b60208501614b3b565b9150604084013590509250925092565b60005b83811015614ec6578181015183820152602001614eae565b83811115614ed5576000848401525b50505050565b60008151808452614ef3816020860160208601614eab565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006116516020830184614edb565b600080600080600060a08688031215614f5057600080fd5b8535614f5b81614a4e565b9450602086013593506040860135614f7281614a4e565b92506060860135614f8281614a4e565b91506080860135614f9281614a4e565b809150509295509295909350565b600081518084526020808501945080840160005b83811015614fe657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614fb4565b509495945050505050565b6040815260006150046040830185614fa0565b82810360208401526145e78185614fa0565b60006020828403121561502857600080fd5b815161165181614a4e565b8183526000602080850194508260005b85811015614fe657813561505681614a4e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101615043565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156150b057600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006101c08e83528d60208401528c60408401528b6060840152615145608084018c80518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b806101408401526151598184018a8c615033565b905082810361016084015261516f81888a61507e565b905082810361018084015261518581868861507e565b91505073ffffffffffffffffffffffffffffffffffffffff83166101a08301529d9c50505050505050505050505050565b6040815260006151c96040830185614edb565b82810360208401526145e78185614edb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561521c57600080fd5b815167ffffffffffffffff8082111561523457600080fd5b818401915084601f83011261524857600080fd5b81518181111561525a5761525a6151db565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156152a0576152a06151db565b816040528281528760208487010111156152b957600080fd5b6152ca836020830160208801614eab565b979650505050505050565b600061014082019050868252856020830152846040830152836060830152615351608083018480518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b9695505050505050565b89815288602082015260c06040820152600061537b60c08301898b615033565b828103606084015261538e81888a61507e565b905082810360808401526153a381868861507e565b91505073ffffffffffffffffffffffffffffffffffffffff831660a08301529a9950505050505050505050565b600060e082840312156153e257600080fd5b60405160e0810181811067ffffffffffffffff82111715615405576154056151db565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b60006020828403121561546657600080fd5b5051919050565b60006101c0820190508a82528960208301528860408301528760608301528660808301526154ef60a083018780518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b73ffffffffffffffffffffffffffffffffffffffff808616610160840152846101808401528084166101a0840152509a9950505050505050505050565b60006101c0820190508a82528960208301528860408301528760608301528660808301526155ae60a083018780518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b61016082019490945273ffffffffffffffffffffffffffffffffffffffff92831661018082015291166101a0909101529695505050505050565b60006101a08201905089825288602083015287604083015286606083015285608083015261566a60a083018680518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b73ffffffffffffffffffffffffffffffffffffffff84166101608301528215156101808301529998505050505050505050565b8481526020810184905273ffffffffffffffffffffffffffffffffffffffff8316604082015261012081016145e7606083018480518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b60008060006060848603121561573b57600080fd5b8351925060208401519150604084015190509250925092565b60006102008201905088825287602083015286604083015285606083015273ffffffffffffffffffffffffffffffffffffffff80861660808401528460a08401526157f460c08401855180518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b60208401518116610180840152604084015181166101a08401526060840151166101c083015260809092015115156101e0909101529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff0382111561587f5761587f615833565b019392505050565b6000821982111561589a5761589a615833565b500190565b600080604083850312156158b257600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361592357615923615833565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561596257615962615833565b500290565b60008282101561597957615979615833565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826159e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220cb51649ad6de17e4e4b01a07bbec7a02a0189a232255742720228b2fe752ef2a64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806377a8313e1161010f578063c4d66de8116100a2578063f45346dc11610071578063f45346dc14610675578063f505743a14610688578063f66fdcca1461074c578063f8119d511461075457600080fd5b8063c4d66de814610630578063cca5bffd14610643578063d1946dbc14610656578063e7dc9ef61461066c57600080fd5b806391978826116100de57806391978826146105ae578063a3f4df7e146105c1578063ac4b088c1461060a578063c1b4ab8f1461061d57600080fd5b806377a8313e146105475780637d2fd4cc1461055a578063903e61a4146105885780639100e4a31461059b57600080fd5b80633c34822e1161018757806363c9b8601161015657806363c9b860146104fb57806369328dec1461050e57806369cab562146105215780636c665a551461053457600080fd5b80633c34822e146104595780633ec8e52d1461046c578063416ae7681461047f5780635ceae9c4146104e857600080fd5b80631848effa116101c35780631848effa1461027d5780631854b241146102c257806322829a21146102d557806335ea6a75146102e857600080fd5b806311de1fee146101ea57806316626ab9146101ff578063178c21a51461025c575b600080fd5b6101fd6101f8366004614a70565b61075c565b005b61024261020d366004614b1e565b73ffffffffffffffffffffffffffffffffffffffff166000908152603660209081526040808320546037909252909120549091565b604080519283526020830191909152015b60405180910390f35b61026f61026a366004614b50565b6108ea565b604051908152602001610253565b60335461029d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610253565b6101fd6102d0366004614b85565b61094c565b6101fd6102e3366004614a70565b610e86565b61044c6102f6366004614b1e565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091525073ffffffffffffffffffffffffffffffffffffffff9081166000908152603460209081526040918290208251610160810184528154815260018201546fffffffffffffffffffffffffffffffff808216948301949094527001000000000000000000000000000000009081900484169482019490945260028201548084166060830152939093049091166080830152600381015464ffffffffff811660a0840152650100000000009004831660c08301526004810154831660e083015260058101548316610100830152600601549182166101208201527401000000000000000000000000000000000000000090910460ff1661014082015290565b6040516102539190614be0565b6101fd610467366004614d2c565b610f21565b6101fd61047a366004614d65565b610f7f565b61049261048d366004614b1e565b6113be565b6040516102539190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61026f6104f6366004614db6565b61157c565b6101fd610509366004614b1e565b611658565b6101fd61051c366004614db6565b61184e565b61026f61052f366004614b1e565b6119d3565b6101fd610542366004614db6565b611a01565b6101fd610555366004614b50565b611b72565b61056d610568366004614d2c565b611ce3565b60408051938452602084019290925290820152606001610253565b61026f610596366004614b1e565b611e6c565b6101fd6105a9366004614df8565b611e9a565b6101fd6105bc366004614e6d565b6120df565b6105fd6040518060400160405280600281526020017f4c5000000000000000000000000000000000000000000000000000000000000081525081565b6040516102539190614f25565b6101fd610618366004614db6565b61247b565b6101fd61062b366004614f38565b612aa3565b6101fd61063e366004614b1e565b6130db565b610242610651366004614b1e565b6132ad565b61065e61340b565b604051610253929190614ff1565b61026f61010081565b6101fd610683366004614db6565b6135d3565b610711610696366004614b1e565b60408051606080820183526000808352602080840182905292840181905273ffffffffffffffffffffffffffffffffffffffff948516815260358352839020835191820184528054825260010154938416918101919091527401000000000000000000000000000000000000000090920460ff169082015290565b604080518251815260208084015173ffffffffffffffffffffffffffffffffffffffff16908201529181015160ff1690820152606001610253565b61056d613693565b61026f608081565b610764613838565b6040805160c0810182523360008181526036602090815284822054845282825260378152908490205481840152603a5483850152603b546060840152608083019190915260335483517ffca513a8000000000000000000000000000000000000000000000000000000008152935173__$1ce3dea29f5ec368224a8c5aa624cef9ae$__94631526ecfc9460349460359460389460399460a085019373ffffffffffffffffffffffffffffffffffffffff9093169263fca513a8926004808401938290030181865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190615016565b73ffffffffffffffffffffffffffffffffffffffff168152508d8d8d8d8d8d8d6040518d63ffffffff1660e01b81526004016108a89c9b9a999897969594939291906150cd565b60006040518083038186803b1580156108c057600080fd5b505af41580156108d4573d6000803e3d6000fd5b505050506108e160018055565b50505050505050565b6000811561091e575073ffffffffffffffffffffffffffffffffffffffff8216600090815260356020526040902054610946565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152603460205260409020545b92915050565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152603460209081526040918290206003015482518084018452600281527f4c500000000000000000000000000000000000000000000000000000000000008184015283518085018552600181527f36000000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081523365010000000000909204909416149273__$61422835ae5e51fb34bedcfef91f75f833$__92635b70017b92610a3a926004016151b6565b600060405180830381865af4158015610a57573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a9d919081019061520a565b90610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b60405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603460205260408082205490517f041a352d000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052604481019190915273__$49b23b5becc4a0db881be9d6da702c31a0$__9063041a352d9060640160006040518083038186803b158015610b7957600080fd5b505af4158015610b8d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610bcc57508115155b15610e7f5773ffffffffffffffffffffffffffffffffffffffff858116600090815260346020908152604080832060060154938816835260369091529020547401000000000000000000000000000000000000000090910460ff1690610c3281836138b1565b156108e1577f5555555555555555555555555555555555555555555555555555555555555555811615610dfe5773__$49b23b5becc4a0db881be9d6da702c31a0$__633264718560346035603860396040518060c00160405280888152602001603760008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001603a548152602001603b5481526020018d73ffffffffffffffffffffffffffffffffffffffff168152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b8152600401610dcd9594939291906152d5565b60006040518083038186803b158015610de557600080fd5b505af4158015610df9573d6000803e3d6000fd5b505050505b8383036108e157610e1181836000613a2c565b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f6577e2a7395d7723b4b430421166c5269712d1766166379838f96f218c5cde4a6000604051610e74911515815260200190565b60405180910390a350505b5050505050565b6040517f23a6dd8b00000000000000000000000000000000000000000000000000000000815273__$1ce3dea29f5ec368224a8c5aa624cef9ae$__906323a6dd8b90610ee8906035906037908c908c908c908c908c908c908c9060040161535b565b60006040518083038186803b158015610f0057600080fd5b505af4158015610f14573d6000803e3d6000fd5b5050505050505050505050565b610f29613bb9565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020526040902060050180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b73ffffffffffffffffffffffffffffffffffffffff84811660009081526035602090815260409182902060019081015483518085018552600281527f4c5000000000000000000000000000000000000000000000000000000000000081850152845180860186529283527f36000000000000000000000000000000000000000000000000000000000000009383019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081529290931633149273__$61422835ae5e51fb34bedcfef91f75f833$__92635b70017b926110679290916004016151b6565b600060405180830381865af4158015611084573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110ca919081019061520a565b90611102576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff84166000908152603560205260408082205490517f041a352d000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604481019190915273__$49b23b5becc4a0db881be9d6da702c31a0$__9063041a352d9060640160006040518083038186803b15801561119d57600080fd5b505af41580156111b1573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff838116600081815260366020526040902054918416148015906111ec57508115155b15610e7f577f5555555555555555555555555555555555555555555555555555555555555555811615610e7f5773__$49b23b5becc4a0db881be9d6da702c31a0$__633264718560346035603860396040518060c00160405280888152602001603760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001603a548152602001603b5481526020018b73ffffffffffffffffffffffffffffffffffffffff168152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b81526004016113879594939291906152d5565b60006040518083038186803b15801561139f57600080fd5b505af41580156113b3573d6000803e3d6000fd5b505050505050505050565b6113fe6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff80851660008181526036602090815285822054855282825260378152908590205481850152603a5484860152603b546060850152608084019190915260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173__$d1ac568199f3772e8aebd270d75e55a6d5$__9563f74c32ba95603495603595603895603995939460a0860194919093169263fca513a89260048083019391928290030181865afa1580156114de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115029190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518663ffffffff1660e01b815260040161153b9594939291906152d5565b60e060405180830381865af4158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094691906153d0565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602052604080822090517f14bd9703000000000000000000000000000000000000000000000000000000008152600481019190915260366024820152604481019290925260648201859052918316608482015273__$eb3b57b2f7b5c89a83de55d6db18b0536a$__906314bd97039060a401602060405180830381865af415801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190615454565b90505b9392505050565b611660613bb9565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603460209081526040808320603590925282206116a0916038916039919086613da4565b90508015611750575073ffffffffffffffffffffffffffffffffffffffff16600081815260356020818152604080842060018101805474010000000000000000000000000000000000000000900460ff1686526039845291852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055948452919052915580547fffffffffffffffffffffff000000000000000000000000000000000000000000169055565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260346020818152604080842060068101805474010000000000000000000000000000000000000000900460ff1686526038845291852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155958552929091528282556001820183905560028201929092556003810180547fffffffffffffff0000000000000000000000000000000000000000000000000016905560048101805484169055600501805490921690915580547fffffffffffffffffffffff0000000000000000000000000000000000000000001690555b5050565b611856613838565b6040805160c0810182523360008181526036602081815285832054855283835260378152918590205482850152603a5484860152603b546060850152608084019290925260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173__$1ce3dea29f5ec368224a8c5aa624cef9ae$__956365f37fab95603495603595603895603995929460a085019373ffffffffffffffffffffffffffffffffffffffff9092169263fca513a8926004808401938290030181865afa158015611931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119559190615016565b73ffffffffffffffffffffffffffffffffffffffff168152508a8a8a6040518a63ffffffff1660e01b81526004016119959998979695949392919061546d565b60006040518083038186803b1580156119ad57600080fd5b505af41580156119c1573d6000803e3d6000fd5b505050506119ce60018055565b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603460205260408120610946906145f0565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff80841660008181526036602081815286832054865283835260378152918690205482860152603a5485870152603b546060860152608085019290925260335485517ffca513a8000000000000000000000000000000000000000000000000000000008152955173__$eb3b57b2f7b5c89a83de55d6db18b0536a$__9663272095b4966034966035966038966039969195939460a0860194929093169263fca513a892600480830193928290030181865afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190615016565b73ffffffffffffffffffffffffffffffffffffffff16815250898b8a6040518a63ffffffff1660e01b8152600401611b469998979695949392919061552c565b60006040518083038186803b158015611b5e57600080fd5b505af41580156108e1573d6000803e3d6000fd5b6040805160c0810182523360008181526036602081815285832054855283835260378152918590205482850152603a5484860152603b546060850152608084019290925260335484517ffca513a8000000000000000000000000000000000000000000000000000000008152945173__$1ce3dea29f5ec368224a8c5aa624cef9ae$__9563c11d580d95603495603595603895603995929460a085019373ffffffffffffffffffffffffffffffffffffffff9092169263fca513a8926004808401938290030181865afa158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c719190615016565b73ffffffffffffffffffffffffffffffffffffffff1681525089896040518963ffffffff1660e01b8152600401611caf9897969594939291906155e8565b60006040518083038186803b158015611cc757600080fd5b505af4158015611cdb573d6000803e3d6000fd5b505050505050565b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808516600081815260366020908152858220548552828252603781528582205481860152603a5485870152603b546060860152608085019290925260335485517ffca513a8000000000000000000000000000000000000000000000000000000008152955191958695869573__$d1ac568199f3772e8aebd270d75e55a6d5$__95636ac0885e956034956035958d959460a086019492169263fca513a8926004808401939192918290030181865afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190615016565b73ffffffffffffffffffffffffffffffffffffffff168152506040518563ffffffff1660e01b8152600401611e1e949392919061569d565b606060405180830381865af4158015611e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5f9190615726565b9250925092509250925092565b73ffffffffffffffffffffffffffffffffffffffff811660009081526034602052604081206109469061466f565b611ea2613838565b6040805161016081018252600060a0820181815260c0830182905260e08301829052610100830182905261012083018290526101408301829052825260208201819052918101829052606081018290526080810191909152604080516101608101825273ffffffffffffffffffffffffffffffffffffffff8087166000818152603660209081528582205460a0860190815283835260378252918690205460c0860152603a5460e0860152603b5461010086015261012085019290925260335485517ffca513a8000000000000000000000000000000000000000000000000000000008152955194958695929461014087019492169263fca513a8926004808401939192918290030181865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190615016565b73ffffffffffffffffffffffffffffffffffffffff1681525081526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001831515815250905073__$81eb085430cddbec7bc4c83cc90f74f0ef$__63422054a760346035603860398c8c886040518863ffffffff1660e01b81526004016120a59796959493929190615754565b60006040518083038186803b1580156120bd57600080fd5b505af41580156120d1573d6000803e3d6000fd5b5050505050611cdb60018055565b6120e7613bb9565b81156122b45773ffffffffffffffffffffffffffffffffffffffff8316600090815260356020908152604091829020600101548251808401845260028082527f4c5000000000000000000000000000000000000000000000000000000000000082850152845180860186529081527f31360000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090910460ff1615159273__$61422835ae5e51fb34bedcfef91f75f833$__92635b70017b926121eb9291906004016151b6565b600060405180830381865af4158015612208573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261224e919081019061520a565b90612286576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff83166000908152603560205260409020819055505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260346020908152604091829020600601548251808401845260028082527f4c5000000000000000000000000000000000000000000000000000000000000082850152845180860186529081527f31360000000000000000000000000000000000000000000000000000000000009381019390935292517f5b70017b0000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090910460ff1615159273__$61422835ae5e51fb34bedcfef91f75f833$__92635b70017b926123b29291906004016151b6565b600060405180830381865af41580156123cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612415919081019061520a565b9061244d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff83166000908152603460205260409020819055505050565b612483613bb9565b73ffffffffffffffffffffffffffffffffffffffff83163b151573__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016125409291906151b6565b600060405180830381865af415801561255d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526125a3919081019061520a565b906125db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff831660009081526035602052604090206001015474010000000000000000000000000000000000000000900460ff1615801561266e575073ffffffffffffffffffffffffffffffffffffffff831660009081526034602052604090206006015474010000000000000000000000000000000000000000900460ff16155b73__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31350000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016127119291906151b6565b600060405180830381865af415801561272e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612774919081019061520a565b906127ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff8381166000908152603560205260409081902090517f38f98890000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052908216604482015273__$1dd31b2b6afa536aed409f4dea44446001$__906338f988909060640160006040518083038186803b15801561284857600080fd5b505af415801561285c573d6000803e3d6000fd5b50505050610100603b541073__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f33310000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b815260040161290a9291906151b6565b600060405180830381865af4158015612927573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261296d919081019061520a565b906129a5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50603b546129b4906001615862565b73ffffffffffffffffffffffffffffffffffffffff841660009081526035602052604081206001908101805460ff9490941674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90941693909317909255603b54859260399291612a3a91615887565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603b6000828254612a999190615887565b9091555050505050565b612aab613bb9565b73ffffffffffffffffffffffffffffffffffffffff85163b151573__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612b689291906151b6565b600060405180830381865af4158015612b85573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612bcb919081019061520a565b90612c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526035602052604090206001015474010000000000000000000000000000000000000000900460ff16158015612c96575073ffffffffffffffffffffffffffffffffffffffff851660009081526034602052604090206006015474010000000000000000000000000000000000000000900460ff16155b73__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31350000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612d399291906151b6565b600060405180830381865af4158015612d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612d9c919081019061520a565b90612dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5073ffffffffffffffffffffffffffffffffffffffff8581166000908152603460205260409081902090517f274f5c5b00000000000000000000000000000000000000000000000000000000815260048101919091526024810186905284821660448201528382166064820152908216608482015273__$33f762cd251e217ce6a144dc37d658fca4$__9063274f5c5b9060a40160006040518083038186803b158015612e8057600080fd5b505af4158015612e94573d6000803e3d6000fd5b505050506080603a541073__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f33300000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401612f419291906151b6565b600060405180830381865af4158015612f5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612fa4919081019061520a565b90612fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50603a54612feb906001615862565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603460205260408120600601805460ff9390931674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90931692909217909155603a548691603891613070906001615887565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603a60008282546130cf9190615887565b90915550505050505050565b600054610100900460ff16158080156130fb5750600054600160ff909116105b806131155750303b158015613115575060005460ff166001145b6131a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156131ff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055613247614712565b801561184a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008073__$65820f34e67aa7e6420fb74324c04c50d3$__6337002cf46034603586603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561333c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133609190615016565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526004810194909452602484019290925273ffffffffffffffffffffffffffffffffffffffff90811660448401521660648201526084016040805180830381865af41580156133de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613402919061589f565b91509150915091565b6060806000603a5467ffffffffffffffff81111561342b5761342b6151db565b604051908082528060200260200182016040528015613454578160200160208202803683370190505b50905060005b603a548110156134eb5760386000613473836001615887565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106134b4576134b46158c3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806134e3816158f2565b91505061345a565b506000603b5467ffffffffffffffff811115613509576135096151db565b604051908082528060200260200182016040528015613532578160200160208202803683370190505b50905060005b603b548110156135c95760396000613551836001615887565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110613592576135926158c3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806135c1816158f2565b915050613538565b5090939092509050565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152603460205260409081902090517fda9eaeed00000000000000000000000000000000000000000000000000000000815260048101829052602481018690526044810192909252918316606482015273__$1ce3dea29f5ec368224a8c5aa624cef9ae$__9063da9eaeed9060840160006040518083038186803b15801561367557600080fd5b505af4158015613689573d6000803e3d6000fd5b5050505050505050565b600080600073__$65820f34e67aa7e6420fb74324c04c50d3$__6371251af860346035603860396040518060600160405280603a548152602001603b548152602001603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137669190615016565b73ffffffffffffffffffffffffffffffffffffffff908116909152604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b168152600481019790975260248701959095526044860193909352606485019190915280516084850152602081015160a4850152909101511660c482015260e401606060405180830381865af4158015613809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382d9190615726565b925092509250909192565b6002600154036138a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ad5565b6002600155565b60018055565b60008160001080156138c35750608082105b73__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f55430000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32330000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016139669291906151b6565b600060405180830381865af4158015613983573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526139c9919081019061520a565b90613a01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5060006001613a1184600261592a565b613a1b9190615967565b9390931c6001908116149392505050565b6000826000108015613a3e5750608083105b73__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f55430000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f32330000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613ae19291906151b6565b600060405180830381865af4158015613afe573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613b44919081019061520a565b90613b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b5060006001613b8c85600261592a565b613b969190615967565b90506001811b8315613bad57851791506116519050565b19851691506116519050565b603354604080517f85c858b10000000000000000000000000000000000000000000000000000000081529051339273ffffffffffffffffffffffffffffffffffffffff16916385c858b19160048083019260209291908290030181865afa158015613c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4c9190615016565b73ffffffffffffffffffffffffffffffffffffffff161473__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600281526020017f4c500000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f32000000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613d069291906151b6565b600060405180830381865af4158015613d23573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613d69919081019061520a565b90613da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141573__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31370000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b8152600401613e799291906151b6565b600060405180830381865af4158015613e96573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613edc919081019061520a565b90613f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600684015474010000000000000000000000000000000000000000900460ff16151580613f68575060008080526020879052604090205473ffffffffffffffffffffffffffffffffffffffff8381169116145b80613f915750600183015474010000000000000000000000000000000000000000900460ff1615155b80613fc2575060008080526020869052604090205473ffffffffffffffffffffffffffffffffffffffff8381169116145b6040518060400160405280600281526020017f313600000000000000000000000000000000000000000000000000000000000081525090614030576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600384015465010000000000900473ffffffffffffffffffffffffffffffffffffffff161561440d57600480850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926318160ddd9282820192602092908290030181865afa1580156140c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ed9190615454565b60001473__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31390000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016141939291906151b6565b600060405180830381865af41580156141b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526141f6919081019061520a565b9061422e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b508360030160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561429e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c29190615454565b60001473__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31380000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016143689291906151b6565b600060405180830381865af4158015614385573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143cb919081019061520a565b90614403576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600090506145e7565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561447c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a09190615454565b60001473__$61422835ae5e51fb34bedcfef91f75f833$__635b70017b6040518060400160405280600181526020017f56000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f31380000000000000000000000000000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016145469291906151b6565b600060405180830381865af4158015614563573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526145a9919081019061520a565b906145e1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59190614f25565b50600190505b95945050505050565b600381015460009064ffffffffff9081169042908116820361462857505050600101546fffffffffffffffffffffffffffffffff1690565b600184015460028501546000916145e7916fffffffffffffffffffffffffffffffff91821691614669911661466464ffffffffff881687615967565b6147b3565b906147e7565b600381015460009064ffffffffff908116904290811682036146bb575050506001015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b600184015460028501546000916145e7916fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009283900481169261466992041661470d64ffffffffff881687615967565b614839565b600054610100900460ff166147a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ad5565b6147b161496b565b565b6000806147c0838561592a565b6301e13380900490506147df816b033b2e3c9fd0803ce8000000615887565b949350505050565b60008215806147f4575081155b1561480157506000610946565b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e74000000614825848661592a565b61482f9190615887565b61165191906159ad565b60008160000361485657506b033b2e3c9fd0803ce8000000610946565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600080806002861161488c576000614891565b600286035b925066038882915c40006148a588806147e7565b816148b2576148b261597e565b0491506301e133806148c483896147e7565b816148d1576148d161597e565b0490506000826148e1868961592a565b6148eb919061592a565b600290049050600082856148ff888b61592a565b614909919061592a565b614913919061592a565b60069004905080826301e1338061492a8b8d61592a565b61493491906159ad565b61494a906b033b2e3c9fd0803ce8000000615887565b6149549190615887565b61495e9190615887565b9998505050505050505050565b600054610100900460ff166138ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ad5565b60008083601f840112614a1457600080fd5b50813567ffffffffffffffff811115614a2c57600080fd5b6020830191508360208260051b8501011115614a4757600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114613da157600080fd5b60008060008060008060006080888a031215614a8b57600080fd5b873567ffffffffffffffff80821115614aa357600080fd5b614aaf8b838c01614a02565b909950975060208a0135915080821115614ac857600080fd5b614ad48b838c01614a02565b909750955060408a0135915080821115614aed57600080fd5b50614afa8a828b01614a02565b9094509250506060880135614b0e81614a4e565b8091505092959891949750929550565b600060208284031215614b3057600080fd5b813561165181614a4e565b80358015158114614b4b57600080fd5b919050565b60008060408385031215614b6357600080fd5b8235614b6e81614a4e565b9150614b7c60208401614b3b565b90509250929050565b600080600080600060a08688031215614b9d57600080fd5b8535614ba881614a4e565b94506020860135614bb881614a4e565b93506040860135614bc881614a4e565b94979396509394606081013594506080013592915050565b81518152602080830151610160830191614c0d908401826fffffffffffffffffffffffffffffffff169052565b506040830151614c3160408401826fffffffffffffffffffffffffffffffff169052565b506060830151614c5560608401826fffffffffffffffffffffffffffffffff169052565b506080830151614c7960808401826fffffffffffffffffffffffffffffffff169052565b5060a0830151614c9260a084018264ffffffffff169052565b5060c0830151614cba60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0830151614ce260e084018273ffffffffffffffffffffffffffffffffffffffff169052565b506101008381015173ffffffffffffffffffffffffffffffffffffffff9081169184019190915261012080850151909116908301526101409283015160ff16929091019190915290565b60008060408385031215614d3f57600080fd5b8235614d4a81614a4e565b91506020830135614d5a81614a4e565b809150509250929050565b60008060008060808587031215614d7b57600080fd5b8435614d8681614a4e565b93506020850135614d9681614a4e565b92506040850135614da681614a4e565b9396929550929360600135925050565b600080600060608486031215614dcb57600080fd5b8335614dd681614a4e565b9250602084013591506040840135614ded81614a4e565b809150509250925092565b60008060008060008060c08789031215614e1157600080fd5b8635614e1c81614a4e565b9550602087013594506040870135614e3381614a4e565b93506060870135614e4381614a4e565b92506080870135614e5381614a4e565b9150614e6160a08801614b3b565b90509295509295509295565b600080600060608486031215614e8257600080fd5b8335614e8d81614a4e565b9250614e9b60208501614b3b565b9150604084013590509250925092565b60005b83811015614ec6578181015183820152602001614eae565b83811115614ed5576000848401525b50505050565b60008151808452614ef3816020860160208601614eab565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006116516020830184614edb565b600080600080600060a08688031215614f5057600080fd5b8535614f5b81614a4e565b9450602086013593506040860135614f7281614a4e565b92506060860135614f8281614a4e565b91506080860135614f9281614a4e565b809150509295509295909350565b600081518084526020808501945080840160005b83811015614fe657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614fb4565b509495945050505050565b6040815260006150046040830185614fa0565b82810360208401526145e78185614fa0565b60006020828403121561502857600080fd5b815161165181614a4e565b8183526000602080850194508260005b85811015614fe657813561505681614a4e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101615043565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156150b057600080fd5b8260051b8083602087013760009401602001938452509192915050565b60006101c08e83528d60208401528c60408401528b6060840152615145608084018c80518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b806101408401526151598184018a8c615033565b905082810361016084015261516f81888a61507e565b905082810361018084015261518581868861507e565b91505073ffffffffffffffffffffffffffffffffffffffff83166101a08301529d9c50505050505050505050505050565b6040815260006151c96040830185614edb565b82810360208401526145e78185614edb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561521c57600080fd5b815167ffffffffffffffff8082111561523457600080fd5b818401915084601f83011261524857600080fd5b81518181111561525a5761525a6151db565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156152a0576152a06151db565b816040528281528760208487010111156152b957600080fd5b6152ca836020830160208801614eab565b979650505050505050565b600061014082019050868252856020830152846040830152836060830152615351608083018480518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b9695505050505050565b89815288602082015260c06040820152600061537b60c08301898b615033565b828103606084015261538e81888a61507e565b905082810360808401526153a381868861507e565b91505073ffffffffffffffffffffffffffffffffffffffff831660a08301529a9950505050505050505050565b600060e082840312156153e257600080fd5b60405160e0810181811067ffffffffffffffff82111715615405576154056151db565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b60006020828403121561546657600080fd5b5051919050565b60006101c0820190508a82528960208301528860408301528760608301528660808301526154ef60a083018780518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b73ffffffffffffffffffffffffffffffffffffffff808616610160840152846101808401528084166101a0840152509a9950505050505050505050565b60006101c0820190508a82528960208301528860408301528760608301528660808301526155ae60a083018780518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b61016082019490945273ffffffffffffffffffffffffffffffffffffffff92831661018082015291166101a0909101529695505050505050565b60006101a08201905089825288602083015287604083015286606083015285608083015261566a60a083018680518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b73ffffffffffffffffffffffffffffffffffffffff84166101608301528215156101808301529998505050505050505050565b8481526020810184905273ffffffffffffffffffffffffffffffffffffffff8316604082015261012081016145e7606083018480518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b60008060006060848603121561573b57600080fd5b8351925060208401519150604084015190509250925092565b60006102008201905088825287602083015286604083015285606083015273ffffffffffffffffffffffffffffffffffffffff80861660808401528460a08401526157f460c08401855180518252602081015160208301526040810151604083015260608101516060830152608081015173ffffffffffffffffffffffffffffffffffffffff80821660808501528060a08401511660a085015250505050565b60208401518116610180840152604084015181166101a08401526060840151166101c083015260809092015115156101e0909101529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff0382111561587f5761587f615833565b019392505050565b6000821982111561589a5761589a615833565b500190565b600080604083850312156158b257600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361592357615923615833565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561596257615962615833565b500290565b60008282101561597957615979615833565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826159e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220cb51649ad6de17e4e4b01a07bbec7a02a0189a232255742720228b2fe752ef2a64736f6c634300080e0033",
  "libraries": {
    "Errors": "0xadf6B6d4F628Cd21a4648FcF859Df33e975ef0cE",
    "Reserve": "0x2209fb58a557AE00697DE99997be5d88f9EBfb55",
    "NFTReserve": "0x4a1DbbB24d3d6d368630Ee6f67D8B47d5C3F6203",
    "ReserveConfigurator": "0x1435D054d26B601c752407937BD60698Efd3c649",
    "UserConfigurator": "0xa4a58439A6A0b51be0b66b007A0d89c04d154466",
    "UserNftConfigurator": "0xE582F2536b4a27634013A65A4476Dc4820dCdFaC",
    "UserVariableCalculator": "0xeb202543B4FEf4e51c98116e714DBEC048f0404d",
    "ReserveVariableCalculator": "0x9B35eEC54BbE3246E6790d680a7d212Da66e192a",
    "Validator": "0x38d7C2aE08c3080cE1d5a1cBF4B437D6d9CCEFFF",
    "DepositExecutor": "0x253F8A4d800B904E6184f91281d9CCf6C1c21F42",
    "BorrowExecutor": "0x51Ae44B191Ad79C217c178BeaD9606A59701aBaf",
    "LiquidationExecutor": "0xe1c29C0fbF6DD761B912920bca197675549dE20a"
  },
  "devdoc": {
    "author": "Taker",
    "details": "Core functions of Taker lending protocol*",
    "kind": "dev",
    "methods": {
      "borrow(address,uint256,address)": {
        "details": "Borrows amount of asset if have enough collaterals. Receives corresponding debt tokens      User can borrow from another address if credit is delegated",
        "params": {
          "amount": "The amount to borrow",
          "asset": "The address of the asset to borrow",
          "from": "Address that receving the debt.*"
        }
      },
      "deposit(address,uint256,address)": {
        "details": "Deposits an `amount` of borrowable underlying asset into the reserve, receives overlying tTokens.",
        "params": {
          "amount": "The amount to be deposited",
          "asset": "The address of the underlying asset to deposit",
          "to": "The address receives the tTokens*"
        }
      },
      "depositNFTs(address[],uint256[],uint256[],address)": {
        "details": "Deposits an `amount` of NFT with certain tokenId as collateral, receiving in return overlying tNFT. - E.g. User deposits 1 PUNK and gets in return 1 tPUNK",
        "params": {
          "amounts": "The amounts to be deposited, 1 if it's ERC721",
          "nfts": "The address of the NFTs to deposit",
          "to": "The address that will receive the tNFT, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of tNFT   is a different wallet*",
          "tokenIds": "The tokenIds to be deposited"
        }
      },
      "dropReserve(address)": {
        "details": "Drop reserve",
        "params": {
          "asset": "The underlying asset of the reserve*"
        }
      },
      "getAssetValues(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The total liquidity and debt in ETH"
        }
      },
      "getNftReserveData(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve data*"
        }
      },
      "getPoolValues()": {
        "returns": {
          "_0": "The borrowable liquidity, NFT liquidity, total debt in ETH"
        }
      },
      "getReserveConfig(address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "isNft": "Whether the asset is NFT"
        },
        "returns": {
          "_0": "The configuration of the reserve*"
        }
      },
      "getReserveData(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve data*"
        }
      },
      "getReserveNormalizedDebtScale(address)": {
        "params": {
          "asset": "The address of the underlying asset"
        },
        "returns": {
          "_0": "The normalized debt scale factor"
        }
      },
      "getReserveNormalizedLiquidityScale(address)": {
        "params": {
          "asset": "The address of the underlying asset"
        },
        "returns": {
          "_0": "The normalized income scale factor"
        }
      },
      "getReservesList()": {
        "returns": {
          "_0": "The reserve list",
          "_1": "The nft reserve list*"
        }
      },
      "getUserAssetValues(address,address)": {
        "params": {
          "asset": "The address of the asset",
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The  liquidity, debt, and collateral of asset in ETH"
        }
      },
      "getUserConfig(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The configuration of the user for borrowable asset",
          "_1": "The configuration of the user for NFTs*"
        }
      },
      "getUserState(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The calculated state variables"
        }
      },
      "initNFTReserve(address,uint256,address)": {
        "details": "Initializes a NFT reserve, assigning an tToken",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "configuration": "The configuration of the asset",
          "tNFTAddress": "The address of the associated tNFT*"
        }
      },
      "initReserve(address,uint256,address,address,address)": {
        "details": "Initializes a reserve, assigning an tToken, debt token and an interest rate strategy",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "configuration": "The configuration of the asset",
          "debtTokenAddress": "The address of the associated DebtToken",
          "interestRateStrategyAddress": "The address of the interest rate strategy contract*",
          "tTokenAddress": "The address of the associated tToken"
        }
      },
      "initialize(address)": {
        "details": "Called by proxy contract",
        "params": {
          "provider": "The address of the LendingPoolAddressesProvider*"
        }
      },
      "liquidate(address,uint256,address,address,address,bool)": {
        "details": "Liquidates a position if its Health Factor drops below 1",
        "params": {
          "debt": "The address of the underlying borrowed asset to be repaid with the liquidation",
          "nft": "The addresse of nft to be liquidated",
          "receiveTNFT": "Bool value to control send TNFT or underlying asset to the liquidator*",
          "to": "The address receiving the liuquidated nft/tNft",
          "tokenId": "The tokenId to be liquidated",
          "user": "The address of the borrower getting liquidated"
        }
      },
      "repay(address,uint256,address)": {
        "params": {
          "amount": "The amount to repay",
          "asset": "The address of the asset to borrow",
          "to": "Address which debt token is burnt"
        },
        "returns": {
          "_0": "The repaid amount*"
        }
      },
      "setReserveConfig(address,bool,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "configuration": "The new configuration*",
          "isNft": "Whether the asset is NFT"
        }
      },
      "setReserveInterestRateCalculatorAddress(address,address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "interestRateCalculatorAddress": "The address of the interest rate calculator*"
        }
      },
      "setUserUsingAsCollateral(address,bool)": {
        "params": {
          "asset": "The address of the underlying asset",
          "usingAsCollateral": "`true` if set as collateral, `false` otherwise*"
        }
      },
      "validateTransfer(address,address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount to transfer",
          "asset": "The address of the underlying asset of the tToken",
          "balanceFromBefore": "The tToken balance of `from` address before transfer",
          "from": "The address which tToken is transferred out",
          "to": "The address receiving the tToken"
        }
      },
      "validateTransferNft(address,address,address,uint256)": {
        "params": {
          "amount": "The amount to transfer",
          "asset": "The address of the underlying asset of the tNft",
          "from": "The address which tNft is transferred out",
          "to": "The address receiving the tNft"
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Withdraws borrowable asset from reserve",
        "params": {
          "amount": "The underlying amount to be withdrawn        type(uint256).max if withdraw full tToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "Address that will receive the underlying*"
        }
      },
      "withdrawNFTs(address[],uint256[],uint256[],address)": {
        "details": "Withdraws an `amount` of NFT with certain tokenId, burning the equivalent tNFT owned E.g. User has 1 tPUNK, calls withdraw() and receives 1 PUNK, burning the 1 tPUNK",
        "params": {
          "amounts": "The amounts to be withdrawn, 1 if it's ERC721        type(uint256).max in order to withdraw the whole tNFT balance",
          "nfts": "The addresses of the NFTs to withdraw",
          "to": "Address that will receive the underlying*",
          "tokenIds": "The tokenIds to be withdrawn"
        }
      }
    },
    "title": "LendingPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESS_PROVIDER()": {
        "notice": "Auto generated function to get address provider address"
      },
      "getAssetValues(address)": {
        "notice": "Get liquidity and debt of given asset"
      },
      "getNftReserveData(address)": {
        "notice": "Returns the reserve data"
      },
      "getPoolValues()": {
        "notice": "Get the pool's liquidity of all borrowable and NFT reserves and total debt"
      },
      "getReserveConfig(address,bool)": {
        "notice": "Returns the reserve configuration of the asset"
      },
      "getReserveData(address)": {
        "notice": "Returns the reserve data"
      },
      "getReserveNormalizedDebtScale(address)": {
        "notice": "Get the normalized debt scale of the asset"
      },
      "getReserveNormalizedLiquidityScale(address)": {
        "notice": "Get the normalized income scale of the asset"
      },
      "getReservesList()": {
        "notice": "Returns the reserve list (both reserve and nft reserve)"
      },
      "getUserAssetValues(address,address)": {
        "notice": "Get user's liquidity, debt, and collateral in given asset"
      },
      "getUserConfig(address)": {
        "notice": "Returns the configuration of the user"
      },
      "getUserState(address)": {
        "notice": "Get the user's state variables"
      },
      "liquidate(address,uint256,address,address,address,bool)": {
        "notice": "Only allow liquidate one token in one transaction"
      },
      "repay(address,uint256,address)": {
        "notice": "Repays amount of asset and burn corresponding debt tokens"
      },
      "setReserveConfig(address,bool,uint256)": {
        "notice": "Sets the nft reserve configuration"
      },
      "setReserveInterestRateCalculatorAddress(address,address)": {
        "notice": "Updates the address of the interest rate calculator"
      },
      "setUserUsingAsCollateral(address,bool)": {
        "notice": "Sets whether to use borrowable asset as collateral"
      },
      "validateTransfer(address,address,address,uint256,uint256)": {
        "notice": "Validate tToken transfer"
      },
      "validateTransferNft(address,address,address,uint256)": {
        "notice": "Validate tNft transfer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 182,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 240,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11571,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "ADDRESS_PROVIDER",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ITakerAddressesProvider)3648"
      },
      {
        "astId": 11576,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reserves",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(ReserveData)8317_storage)"
      },
      {
        "astId": 11581,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_nftReserves",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(ReserveData)8089_storage)"
      },
      {
        "astId": 11586,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_userConfigs",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_userDefinedValueType(UserConfiguration)9790)"
      },
      {
        "astId": 11591,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_userNftConfigs",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_userDefinedValueType(UserNftConfiguration)10097)"
      },
      {
        "astId": 11595,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reserveList",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11599,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_nftReserveList",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11601,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reserveCount",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 11603,
        "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
        "label": "_nftReserveCount",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITakerAddressesProvider)3648": {
        "encoding": "inplace",
        "label": "contract ITakerAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ReserveData)8089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTReserve.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)8089_storage"
      },
      "t_mapping(t_address,t_struct(ReserveData)8317_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Reserve.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)8317_storage"
      },
      "t_mapping(t_address,t_userDefinedValueType(UserConfiguration)9790)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => UserConfiguration)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UserConfiguration)9790"
      },
      "t_mapping(t_address,t_userDefinedValueType(UserNftConfiguration)10097)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => UserNftConfiguration)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UserNftConfiguration)10097"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ReserveData)8089_storage": {
        "encoding": "inplace",
        "label": "struct NFTReserve.ReserveData",
        "members": [
          {
            "astId": 8084,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(ReserveConfiguration)8999"
          },
          {
            "astId": 8086,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "tNFTAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8088,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "id",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReserveData)8317_storage": {
        "encoding": "inplace",
        "label": "struct Reserve.ReserveData",
        "members": [
          {
            "astId": 8296,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(ReserveConfiguration)8999"
          },
          {
            "astId": 8298,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "liquidityIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 8300,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "debtIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 8302,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "depositRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 8304,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "borrowRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 8306,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 8308,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "tTokenAddress",
            "offset": 5,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8310,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "debtTokenAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8312,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "interestRateCalculatorAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 8314,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 8316,
            "contract": "contracts/pool/lendingpool/LendingPool.sol:LendingPool",
            "label": "id",
            "offset": 20,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(ReserveConfiguration)8999": {
        "encoding": "inplace",
        "label": "ReserveConfiguration",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(UserConfiguration)9790": {
        "encoding": "inplace",
        "label": "UserConfiguration",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(UserNftConfiguration)10097": {
        "encoding": "inplace",
        "label": "UserNftConfiguration",
        "numberOfBytes": "32"
      }
    }
  }
}
