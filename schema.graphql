type LendingPool @entity {
  id: ID! # proxy
  reserves: [Reserve!]! @derivedFrom(field: "pool")
  nfts: [NftCollection!]! @derivedFrom(field: "pool")
}

type Reserve @entity {
  id: ID! # underlying address, ETH = 0
  pool: LendingPool!

  tToken: Bytes! # proxy
  debtToken: Bytes! # proxy
  interestRateCalculator: Bytes! #library
  liqThreshold: BigInt!
  ltv: BigInt!
  liquidityIndex: BigDecimal
  debtIndex: BigDecimal
  depositRate: BigDecimal
  borrowRate: BigDecimal

  name: String
  symbol: String

  users: [UserReserve!]! @derivedFrom(field: "reserve")
}

type NftCollection @entity {
  id: ID! # underlying address
  pool: LendingPool

  tNFT: Bytes # proxy
  ercType: BigInt
  liqThreshold: BigInt
  ltv: BigInt

  name: String
  symbol: String
  floorPrice: BigInt!
  PriceAggregator: PriceAggregator

  users: [UserNftCollection!]!
}

type User @entity {
  id: ID! # address
  nftCollateral: BigInt!
  reserveSupply: BigInt!
  totalCollateral: BigInt!
  totalDebt: BigInt!
  ltvAcc: BigInt!
  liqThreshAcc: BigInt!
  healthFactor: BigInt!

  reserves: [UserReserve!]! @derivedFrom(field: "user")
  collections: [UserNftCollection!]! @derivedFrom(field: "user")
}

type UserReserve @entity {
  id: ID! # user - reserve
  user: User!
  reserve: Reserve!
  depositedAmount: BigInt! # tToken.balanceOf(user) * LiqInx
  borrowedAmount: BigInt! # debtToken.balanceOf(user) * DebtIdx
  usedAsCollateral: Boolean!
}

type UserNftCollection @entity {
  id: ID! # user - collection
  user: User!
  collection: NftCollection!
  tokens: [NftToken!] @derivedFrom(field: "userCollection")
}

type NftToken @entity {
  id: ID! # UserNftCollection - tokenId
  userCollection: UserNftCollection!
  amount: BigInt!
}

type PriceAggregator @entity {
  id: ID! #aggregator address
  collection: NftCollection!
  floorPrice: BigInt!
  oracle: Bytes!
}

type CryptoPunk @entity {
  id: ID!
  punkIndex: BigInt!
  owner: Bytes!
}
